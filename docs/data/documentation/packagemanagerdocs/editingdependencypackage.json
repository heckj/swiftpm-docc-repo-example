{
  "abstract" : [
    {
      "text" : "Temporarily switch a remote dependency to local in order to edit the dependency.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/EditingDependencyPackage"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Swift Package Manager"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Editing a remote dependency used in a Swift package"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift package manager supports editing dependencies, when your work requires making a change to one of your dependencies (for example, to fix a bug, or add a new API).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The package manager moves the dependency into a location under the ",
              "type" : "text"
            },
            {
              "code" : "Packages\/",
              "type" : "codeVoice"
            },
            {
              "text" : " directory where it can be edited.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For the packages which are in the editable state, ",
              "type" : "text"
            },
            {
              "code" : "swift build",
              "type" : "codeVoice"
            },
            {
              "text" : " uses the exact sources in this directory to build, regardless of their state, Git repository status, tags, or the tag desired by dependency resolution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In other words, this ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "just builds",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " against the sources that are present.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When an editable package is present, it is used to satisfy all instances of that package in the dependency graph.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It is possible to edit all, some, or none of the packages in a dependency graph, without restriction.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Editable packages are best used to do experimentation with dependency code, or to create and submit a patch in the dependency owner’s repository (upstream).",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are two ways to put a package in editable state, using ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageEdit",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first example creates a branch called ",
              "type" : "text"
            },
            {
              "code" : "bugFix",
              "type" : "codeVoice"
            },
            {
              "text" : " from the currently resolved version and puts the dependency ",
              "type" : "text"
            },
            {
              "code" : "PlayingCard",
              "type" : "codeVoice"
            },
            {
              "text" : " in the ",
              "type" : "text"
            },
            {
              "code" : "Packages\/",
              "type" : "codeVoice"
            },
            {
              "text" : " directory:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package edit PlayingCard --branch bugFix"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second is similar, except that the Package Manager leaves the dependency at a detached HEAD at the commit you specified.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package edit PlayingCard --revision 969c6a9"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If the branch or revision option is not provided, the Package Manager uses the currently resolved version on a detached HEAD.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once a package is in an editable state, you can navigate to the directory ",
              "type" : "text"
            },
            {
              "code" : "Packages\/PlayingCard",
              "type" : "codeVoice"
            },
            {
              "text" : " to make changes, build and then push the changes or open a pull request to the upstream repository.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can end editing a package with ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageUnedit",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package unedit PlayingCard"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This removes the edited dependency from ",
              "type" : "text"
            },
            {
              "code" : "Packages\/",
              "type" : "codeVoice"
            },
            {
              "text" : " and restores the originally resolved version.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This command fails if you have uncommitted changes or changes which are not pushed to the remote repository.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you want to discard these changes and unedit, use the ",
              "type" : "text"
            },
            {
              "code" : "--force",
              "type" : "codeVoice"
            },
            {
              "text" : " option:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package unedit PlayingCard --force"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "anchor" : "Top-of-Tree-Development",
          "level" : 3,
          "text" : "Top of Tree Development",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This feature allows overriding a dependency with a local checkout on the filesystem.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This checkout is completely unmanaged by the package manager and is used as-is.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The only requirement is that the package name in the overridden checkout shouldn’t change.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is useful when developing multiple packages in tandem, or when working on packages alongside an",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The command to attach (or create) a local checkout is:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package edit <package name> \\",
            "    --path <path\/to\/dependency>"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, if ",
              "type" : "text"
            },
            {
              "code" : "PlayingCard",
              "type" : "codeVoice"
            },
            {
              "text" : " depends on ",
              "type" : "text"
            },
            {
              "code" : "swift-collections",
              "type" : "codeVoice"
            },
            {
              "text" : " and you have a checkout of ",
              "type" : "text"
            },
            {
              "code" : "swift-collections",
              "type" : "codeVoice"
            },
            {
              "text" : " at",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "\/workspace\/swift-collections",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package edit swift-collections \\",
            "    --path \/workspace\/swift-collections"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A checkout of ",
              "type" : "text"
            },
            {
              "code" : "swift-collections",
              "type" : "codeVoice"
            },
            {
              "text" : " is created if it doesn’t exist at the path you specified.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If a checkout exists, package manager validates the package name at the given path and attaches to it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The package manager also creates a symlink in the ",
              "type" : "text"
            },
            {
              "code" : "Packages\/",
              "type" : "codeVoice"
            },
            {
              "text" : " directory to the checkout path.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageUnedit",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " command to stop using the local checkout:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ swift package unedit swift-collections"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingDependencyFailures",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingSystemLibraryDependency",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ExampleSystemLibraryPkgConfig"
      ]
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/packagemanagerdocs\/editingdependencypackage"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"command-icon.svg": {
  "alt" : null,
  "identifier" : "command-icon.svg",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "1x",
        "light"
      ],
      "url" : "\/images\/PackageManagerDocs\/command-icon.svg"
    },
    {
      "traits" : [
        "1x",
        "dark"
      ],
      "url" : "\/images\/PackageManagerDocs\/command-icon~dark.svg"
    }
  ]
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs": {
  "abstract" : [
    {
      "text" : "Organize, manage, and edit Swift packages.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Swift Package Manager",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/AddingDependencies": {
  "abstract" : [
    {
      "text" : "Use other swift packages, system libraries, or binary dependencies in your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Adding dependencies to a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/addingdependencies"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/AddingSystemLibraryDependency": {
  "abstract" : [
    {
      "text" : "Define the location for the library and provide module map to expose C headers to Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingSystemLibraryDependency",
  "kind" : "article",
  "role" : "article",
  "title" : "Adding a dependency on a system library.",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/addingsystemlibrarydependency"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ExampleSystemLibraryPkgConfig": {
  "abstract" : [
    {
      "text" : "Create an Command-line executable package that uses libgit2 as a system library dependency.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ExampleSystemLibraryPkgConfig",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift package example that uses system library dependency with pkg-config",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/examplesystemlibrarypkgconfig"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/PackageEdit": {
  "abstract" : [
    {
      "text" : "Put a package in editable mode.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageEdit",
  "images" : [
    {
      "identifier" : "command-icon.svg",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "article",
  "title" : "swift package edit",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/packageedit"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/PackageUnedit": {
  "abstract" : [
    {
      "text" : "Remove a package from editable mode.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageUnedit",
  "images" : [
    {
      "identifier" : "command-icon.svg",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "article",
  "title" : "swift package unedit",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/packageunedit"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ResolvingDependencyFailures": {
  "abstract" : [
    {
      "text" : "Understand dependency failure scenarios.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingDependencyFailures",
  "kind" : "article",
  "role" : "article",
  "title" : "Resolving package dependency failures",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/resolvingdependencyfailures"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ResolvingPackageVersions": {
  "abstract" : [
    {
      "text" : "Coordinate and constrain dependencies for your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
  "kind" : "article",
  "role" : "article",
  "title" : "Resolving and updating dependencies",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/resolvingpackageversions"
}
}
}