{
  "abstract" : [
    {
      "text" : "Create an Command-line executable package that uses libgit2 as a system library dependency.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ExampleSystemLibraryPkgConfig"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Swift Package Manager"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Swift package example that uses system library dependency with pkg-config"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example walks through creating a binary executable that depends on ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/libgit2\/libgit2",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Set-up-the-package",
          "level" : 3,
          "text" : "Set up the package",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Create a directory called ",
              "type" : "text"
            },
            {
              "code" : "example",
              "type" : "codeVoice"
            },
            {
              "text" : ", and initialize it as a package that builds an executable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ mkdir example",
            "$ cd example",
            "example$ swift package init --type executable"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Edit the ",
              "type" : "text"
            },
            {
              "code" : "Sources\/example\/main.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " so it consists of this code:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import Clibgit",
            "",
            "let options = git_repository_init_options()",
            "print(options)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Add-a-system-library-target",
          "level" : 3,
          "text" : "Add a system library target",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Add a ",
              "type" : "text"
            },
            {
              "code" : "systemLibrary",
              "type" : "codeVoice"
            },
            {
              "text" : " target to ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : " that uses the ",
              "type" : "text"
            },
            {
              "code" : "pkgConfig",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter to look up the location of the library.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ swift-tools-version:6.1",
            "import PackageDescription",
            "",
            "let package = Package(",
            "    name: \"example\",",
            "    targets: [",
            "        .systemLibrary(",
            "            name: \"Clibgit\",",
            "            pkgConfig: \"libgit2\",",
            "            providers: [",
            "                .brew([\"libgit2\"]),",
            "                .apt([\"libgit2-dev\"])",
            "            ]",
            "        )",
            "    ]",
            ")",
            ""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The above example specifies two ",
              "type" : "text"
            },
            {
              "code" : "providers",
              "type" : "codeVoice"
            },
            {
              "text" : " that Swift Package Manager can use to install the dependency, if needed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "For Windows-only packages ",
                  "type" : "text"
                },
                {
                  "code" : "pkgConfig",
                  "type" : "codeVoice"
                },
                {
                  "text" : " should be omitted as ",
                  "type" : "text"
                },
                {
                  "code" : "pkg-config",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is not expected to be available.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If you can’t or don’t want to use the ",
                  "type" : "text"
                },
                {
                  "code" : "pkgConfig",
                  "type" : "codeVoice"
                },
                {
                  "text" : " parameter, pass the path of a directory containing the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "library using the ",
                  "type" : "text"
                },
                {
                  "code" : "-L",
                  "type" : "codeVoice"
                },
                {
                  "text" : " flag in the command line when building your package instead.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "code" : [
                "% swift build -Xlinker -L\/usr\/local\/lib\/"
              ],
              "syntax" : "bash",
              "type" : "codeListing"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example follows the convention of prefixing modules with ",
              "type" : "text"
            },
            {
              "code" : "C",
              "type" : "codeVoice"
            },
            {
              "text" : " and using camelcase for the rest of the library, following Swift module name conventions.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This allows you to create and use another module more directly named after the library that provides idiomatic Swift wrappers around the underlying C functions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Create-a-module-map-and-local-header",
          "level" : 3,
          "text" : "Create a module map and local header",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Create a directory ",
              "type" : "text"
            },
            {
              "code" : "Sources\/Clibgit",
              "type" : "codeVoice"
            },
            {
              "text" : " in your ",
              "type" : "text"
            },
            {
              "code" : "example",
              "type" : "codeVoice"
            },
            {
              "text" : " project, and add a ",
              "type" : "text"
            },
            {
              "code" : "module.modulemap",
              "type" : "codeVoice"
            },
            {
              "text" : " in the directory:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "module Clibgit [system] {",
            "  header \"git2.h\"",
            "  link \"git2\"",
            "  export *",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the same directory, create the header file, ",
              "type" : "text"
            },
            {
              "code" : "git2.h",
              "type" : "codeVoice"
            },
            {
              "text" : ", that the above module map references:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ git2.h",
            "#pragma once",
            "#include <git2.h>"
          ],
          "syntax" : "c",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Try to avoid specifying an absolute system path in the module map to the ",
                  "type" : "text"
                },
                {
                  "code" : "git2.h",
                  "type" : "codeVoice"
                },
                {
                  "text" : " header provided by the library.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Doing so will break compatibility of your project between machines that use a different file system layout or install libraries to different paths.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Tip",
          "style" : "tip",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "example",
              "type" : "codeVoice"
            },
            {
              "text" : " directory structure should look like this now:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".",
            "├── Package.swift",
            "└── Sources",
            "    ├── Clibgit",
            "    │   ├── git2.h",
            "    │   └── module.modulemap",
            "    └── main.swift"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Add-the-system-library-dependency-to-the-executable-target",
          "level" : 3,
          "text" : "Add the system library dependency to the executable target",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "With the system library target fully defined, you can now use it as a dependency in other targets.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, in ",
              "type" : "text"
            },
            {
              "code" : "Package.swift",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ swift-tools-version:6.1",
            "import PackageDescription",
            "",
            "let package = Package(",
            "    name: \"example\",",
            "    targets: [",
            "        .executableTarget(",
            "            name: \"example\",",
            "            dependencies: [\"Clibgit\"],",
            "            path: \"Sources\"",
            "        ),",
            "        .systemLibrary(",
            "            name: \"Clibgit\",",
            "            pkgConfig: \"libgit2\",",
            "            providers: [",
            "                .brew([\"libgit2\"]),",
            "                .apt([\"libgit2-dev\"])",
            "            ]",
            "        )",
            "    ]",
            ")",
            ""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Run-the-example",
          "level" : 3,
          "text" : "Run the example",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Now run the command ",
              "type" : "text"
            },
            {
              "code" : "swift run",
              "type" : "codeVoice"
            },
            {
              "text" : " in the example directory to create and run the executable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "% example swift run",
            "Building for debugging...",
            "[1\/1] Write swift-version-3E695E30EE234B31.txt",
            "Build of product 'example' complete! (0.10s)",
            "git_repository_init_options(version: 0, flags: 0, mode: 0, workdir_path: nil, description: nil, template_path: nil, initial_head: nil, origin_url: nil)"
          ],
          "syntax" : "bash",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingDependencyFailures",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingSystemLibraryDependency",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/EditingDependencyPackage"
      ]
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/packagemanagerdocs\/examplesystemlibrarypkgconfig"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://PackageManagerDocs/documentation/PackageManagerDocs": {
  "abstract" : [
    {
      "text" : "Organize, manage, and edit Swift packages.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Swift Package Manager",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/AddingDependencies": {
  "abstract" : [
    {
      "text" : "Use other swift packages, system libraries, or binary dependencies in your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Adding dependencies to a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/addingdependencies"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/AddingSystemLibraryDependency": {
  "abstract" : [
    {
      "text" : "Define the location for the library and provide module map to expose C headers to Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingSystemLibraryDependency",
  "kind" : "article",
  "role" : "article",
  "title" : "Adding a dependency on a system library.",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/addingsystemlibrarydependency"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/EditingDependencyPackage": {
  "abstract" : [
    {
      "text" : "Temporarily switch a remote dependency to local in order to edit the dependency.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/EditingDependencyPackage",
  "kind" : "article",
  "role" : "article",
  "title" : "Editing a remote dependency used in a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/editingdependencypackage"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ResolvingDependencyFailures": {
  "abstract" : [
    {
      "text" : "Understand dependency failure scenarios.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingDependencyFailures",
  "kind" : "article",
  "role" : "article",
  "title" : "Resolving package dependency failures",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/resolvingdependencyfailures"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ResolvingPackageVersions": {
  "abstract" : [
    {
      "text" : "Coordinate and constrain dependencies for your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
  "kind" : "article",
  "role" : "article",
  "title" : "Resolving and updating dependencies",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/resolvingpackageversions"
},
"https://github.com/libgit2/libgit2": {
  "identifier" : "https:\/\/github.com\/libgit2\/libgit2",
  "title" : "libgit2",
  "titleInlineContent" : [
    {
      "text" : "libgit2",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/libgit2\/libgit2"
}
}
}