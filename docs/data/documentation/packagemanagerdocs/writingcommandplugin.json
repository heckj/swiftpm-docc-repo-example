{
  "abstract" : [
    {
      "text" : "Create a command plugin to provide commands that extend the package manager.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/Plugins"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/WritingCommandPlugin"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Swift Package Manager"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "introducedAt" : "5.6",
        "name" : "Swift"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Writing a command plugin"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The first step when writing a package plugin is to decide what kind of plugin you need.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Implement a command plugin to provide actions that users can perform at any time and that are not associated with a build.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If your goal is to generate source files that should be part of a build, or to perform other actions at the start of every build, implement a build tool plugin.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "See ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/WritingBuildToolPlugin",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : " for details about creating a build tool plugin.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Command plugins are invoked at will by the user, by invoking ",
              "type" : "text"
            },
            {
              "code" : "swift",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "package",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "<command>",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "<arguments>",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "They are unrelated to the build graph, and often perform their work by invoking to command line tools as subprocesses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Command plugins are declared in a similar way to build tool plugins, except that they declare a ",
              "type" : "text"
            },
            {
              "code" : ".command()",
              "type" : "codeVoice"
            },
            {
              "text" : " capability and implement a different entry point in the plugin script.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A command plugin specifies the semantic intent of the command — this might be one of the predefined intents such as “documentation generation” or “source code formatting”, or it might be a custom intent with a specialized verb that can be passed to the ",
              "type" : "text"
            },
            {
              "code" : "swift",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "package",
              "type" : "codeVoice"
            },
            {
              "text" : " command.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A command plugin can also specify any special permissions it needs, such as the permission to modify the files under the package directory.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The command’s intent declaration provides a way of grouping command plugins by their functional categories, so that package manager — or an IDE that supports package manager packages — can show the commands that are available for a particular purpose.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, this approach supports having different command plugins for generating documentation for a package, while still allowing those different commands to be grouped and discovered by intent.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A plugin is available to the package that defines it, and if there is a corresponding plugin product, it is also available to any other package that has a direct dependency on the package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Declaring-a-command-plugin-in-the-package-manifest",
          "level" : 3,
          "text" : "Declaring a command plugin in the package manifest",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The manifest of a package that declares a command plugin might look like:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import PackageDescription",
            "",
            "let package = Package(",
            "  name: \"MyPluginPackage\",",
            "  products: [",
            "    .plugin(",
            "      name: \"MyCommandPlugin\",",
            "      targets: [",
            "        \"MyCommandPlugin\"",
            "      ]",
            "    )",
            "  ],",
            "  dependencies: [",
            "    .package(",
            "      url: \"https:\/\/github.com\/example\/sometool\",",
            "      from: \"0.1.0\"",
            "    )",
            "  ],",
            "  targets: [",
            "    .plugin(",
            "      name: \"MyCommandPlugin\",",
            "      capability: .command(",
            "        intent: .sourceCodeFormatting(),",
            "        permissions: [",
            "          .writeToPackageDirectory(reason: \"This command reformats source files\")",
            "        ]",
            "      ),",
            "      dependencies: [",
            "        .product(name: \"SomeTool\", package: \"sometool\"),",
            "      ]",
            "    )",
            "  ]",
            ")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the above example, the plugin declares its purpose is source code formatting, and that it needs permission to modify files in the package directory.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The package manager runs plugins in a sandbox that prevents network access and most file system access.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Package manager allows additional permissions to allow network access or file system acess when you declare them after it receives approval from the user.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Implementing-the-command-plugin-script",
          "level" : 3,
          "text" : "Implementing the command plugin script",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The source that implements command plugins should be located under the ",
              "type" : "text"
            },
            {
              "code" : "Plugins",
              "type" : "codeVoice"
            },
            {
              "text" : " subdirectory in the package.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Conform the entry point of the plugin to the ",
              "type" : "text"
            },
            {
              "code" : "CommandPlugin",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import PackagePlugin",
            "import Foundation",
            "",
            "@main",
            "struct MyCommandPlugin: CommandPlugin {",
            "123456789012345678901234567890123456789012345678901234567890",
            "  func performCommand(",
            "    context: PluginContext,",
            "    arguments: [String]",
            "  ) throws {",
            "    \/\/ To invoke `sometool` to format code, start by locating it.",
            "    let sometool = try context.tool(named: \"sometool\")",
            "",
            "    \/\/ By convention, use a configuration file in the root ",
            "    \/\/ directory of the package. This allows package owners to ",
            "    \/\/ commit their format settings to their repository.",
            "    let configFile = context",
            "      .package",
            "      .directory",
            "      .appending(\".sometoolconfig\")",
            "",
            "    \/\/ Extract the target arguments (if there are none, assume all).",
            "    var argExtractor = ArgumentExtractor(arguments)",
            "    let targetNames = argExtractor.extractOption(named: \"target\")",
            "    let targets = targetNames.isEmpty",
            "      ? context.package.targets",
            "      : try context.package.targets(named: targetNames)",
            "",
            "    \/\/ Iterate over the provided targets to format.",
            "    for target in targets {",
            "      \/\/ Skip any type of target that doesn't have ",
            "      \/\/ source files.",
            "      \/\/ Note: This could instead emit a warning or error.",
            "      guard let target = target.sourceModule else { continue }",
            "",
            "      \/\/ Invoke `sometool` on the target directory, passing ",
            "      \/\/ a configuration file from the package directory.",
            "      let sometoolExec = URL(fileURLWithPath: sometool.path.string)",
            "      let sometoolArgs = [",
            "        \"--config\",",
            "        \"\\(configFile)\",",
            "        \"--cache\", ",
            "        \"\\(context.pluginWorkDirectory.appending(\"cache-dir\"))\",",
            "        \"\\(target.directory)\"",
            "      ]",
            "      let process = try Process.run(sometoolExec, ",
            "                                    arguments: sometoolArgs)",
            "      process.waitUntilExit()",
            "",
            "      \/\/ Check whether the subprocess invocation was successful.",
            "      if process.terminationReason == .exit ",
            "        && process.terminationStatus == 0",
            "      {",
            "        print(\"Formatted the source code in \\(target.directory).\")",
            "      } else {",
            "        let problem = \"\\(process.terminationReason):\\(process.terminationStatus)\"",
            "        Diagnostics.error(\"Formatting invocation failed: \\(problem)\")",
            "      }",
            "    }",
            "  }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike build tool plugins, which apply to a single package target, a command plugin does not necessarily operate on just a single target.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "context",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter provides access to the inputs, including to a distilled version of the package graph rooted at the package to which the command plugin is applied.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Command plugins can accept arguments, which you use to control options for the plugin’s actions or further narrow down what the plugin operates on.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This example uses the convention of passing ",
              "type" : "text"
            },
            {
              "code" : "--target",
              "type" : "codeVoice"
            },
            {
              "text" : " to limit the scope of the plugin to a set of targets in the package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Plugins can only use standard system libraries, not those from other packages such as ",
              "type" : "text"
            },
            {
              "code" : "SwiftArgumentParser",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Consequently, the plugin example uses the built-in ",
              "type" : "text"
            },
            {
              "code" : "ArgumentExtractor",
              "type" : "codeVoice"
            },
            {
              "text" : " helper in the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "PackagePlugin",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " module to extract the argument.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Diagnostics",
          "level" : 3,
          "text" : "Diagnostics",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Plugin entry points are marked ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : ", and any errors thrown from the entry point causes the plugin invocation to be marked as having failed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The thrown error is presented to the user, and should include a clear description of what went wrong.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Additionally, plugins can use the ",
              "type" : "text"
            },
            {
              "code" : "Diagnostics",
              "type" : "codeVoice"
            },
            {
              "text" : " API in PackagePlugin to emit warnings and errors that optionally include references to file paths and line numbers in those files.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Debugging-and-Testing",
          "level" : 3,
          "text" : "Debugging and Testing",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Package manager doesn’t currently have any specific support for debugging and testing plugins.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Many plugins act as adapters that construct command lines for invoking the tools that do the real work.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the cases in which there is non-trivial code in a plugin, a good approach is to factor out that code into separate source files that can be included in unit tests using symbolic links with relative paths.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Xcode-Extensions-to-the-PackagePlugin-API",
          "level" : 3,
          "text" : "Xcode Extensions to the PackagePlugin API",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you invoke a plugin in Apple’s Xcode IDE, the plugins has access to a library module provided by Xcode called ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "XcodeProjectPlugin",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This module extends the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "PackagePlugin",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " APIs to let plugins work on Xcode targets in addition to packages.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In order to write a plugin that works with packages in every environment, and that conditionally works with Xcode projects when run in Xcode, the plugin should conditionally import the ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "XcodeProjectPlugin",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " module when it is available.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import PackagePlugin",
            "",
            "@main",
            "struct MyCommandPlugin: CommandPlugin {",
            "    \/\/\/ This entry point is called when operating on a Swift package.",
            "    func performCommand(context: PluginContext,",
            "                        arguments: [String]) throws {",
            "        debugPrint(context)",
            "    }",
            "}",
            "",
            "#if canImport(XcodeProjectPlugin)",
            "import XcodeProjectPlugin",
            "",
            "extension MyCommandPlugin: XcodeCommandPlugin {",
            "    \/\/\/ This entry point is called when operating on an Xcode project.",
            "    func performCommand(context: XcodePluginContext, ",
            "                        arguments: [String]) throws {",
            "        debugPrint(context)",
            "    }",
            "}",
            "#endif"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "XcodePluginContext",
              "type" : "codeVoice"
            },
            {
              "text" : " input structure is similar to the ",
              "type" : "text"
            },
            {
              "code" : "PluginContext",
              "type" : "codeVoice"
            },
            {
              "text" : " structure, except that it provides access to an Xcode project.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Xcode project uses Xcode naming and semantics for the project model, which is somewhat different from that of package manager.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Some of the underlying types, such as ",
              "type" : "text"
            },
            {
              "code" : "FileList",
              "type" : "codeVoice"
            },
            {
              "text" : ", or ",
              "type" : "text"
            },
            {
              "code" : "Path",
              "type" : "codeVoice"
            },
            {
              "text" : ", are the same for ",
              "type" : "text"
            },
            {
              "code" : "PackagePlugin",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "XcodeProjectPlugin",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If any targets are chosen in the Xcode user interface, Xcode passes their names as ",
              "type" : "text"
            },
            {
              "code" : "--target",
              "type" : "codeVoice"
            },
            {
              "text" : " arguments to the plugin.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Other IDEs or custom environments that use the package manager could similarly provide modules that define new entry points and extend the functionality of the core ",
              "type" : "text"
            },
            {
              "code" : "PackagePlugin",
              "type" : "codeVoice"
            },
            {
              "text" : " APIs.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "anchor" : "Writing-Plugins",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/WritingBuildToolPlugin"
      ],
      "title" : "Writing Plugins"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/packagemanagerdocs\/writingcommandplugin"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://PackageManagerDocs/documentation/PackageManagerDocs": {
  "abstract" : [
    {
      "text" : "Organize, manage, and edit Swift packages.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Swift Package Manager",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/Plugins": {
  "abstract" : [
    {
      "text" : "Extend package manager functionality with build or command plugins.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/Plugins",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Plugins",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/plugins"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/WritingBuildToolPlugin": {
  "abstract" : [
    {
      "text" : "Create a build tool to process or generate files.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/WritingBuildToolPlugin",
  "kind" : "article",
  "role" : "article",
  "title" : "Writing a build tool plugin",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/writingbuildtoolplugin"
}
}
}