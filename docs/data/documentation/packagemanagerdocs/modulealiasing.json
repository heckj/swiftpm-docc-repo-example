{
  "abstract" : [
    {
      "text" : "Create aliased names for modules to avoid collisions between targets in your package or its dependencies.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ModuleAliasing"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Swift Package Manager"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "introducedAt" : "5.7",
        "name" : "Swift"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Module Aliasing"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "As you add dependencies to your package, a name collision can occur among modules from different packages.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Module names such as ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " are common examples.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In order to resolve the collision, package manager, ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "from Swift 5.7 or later",
                  "type" : "text"
                }
              ],
              "type" : "strong"
            },
            {
              "text" : ", provides the parameter ",
              "type" : "text"
            },
            {
              "code" : "moduleAliases",
              "type" : "codeVoice"
            },
            {
              "text" : " when defining dependencies for targets.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You define new unique names for the modules that would otherwise conflict, without requiring any source code changes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note the following additional requirements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A module being aliased needs to be a pure Swift module only: no ObjC\/C\/C++\/Asm are supported due to a likely symbol collision. Similarly, use of ",
                      "type" : "text"
                    },
                    {
                      "code" : "@objc(name)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " should be avoided.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A module being aliased cannot be a prebuilt binary due to the impact on mangling and serialization, i.e. source-based only.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "A module being aliased should not be passed to a runtime call such as ",
                      "type" : "text"
                    },
                    {
                      "code" : "NSClassFromString(...)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " that converts (directly or indirectly) String to a type in a module since such call will fail.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If a target mapped to a module being aliased contains resources, they should be asset catalogs, localized strings, or resources that do not require explicit module names.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "If a product that a module being aliased belongs to has a conflicting name with another product, at most one of the products can be a non-automatic library type.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "How-to-Use",
          "level" : 3,
          "text" : "How to Use",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Module aliases are defined as a dictionary parameter in a targetâ€™s dependencies where the key is the original module name in conflict and the value is a user-defined new unique name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "    targets: [ ",
            "        .target(",
            "            name: \"MyTarget\",",
            "            dependencies: [ ",
            "                .product(",
            "                    name: \"Utils\",",
            "                    package: \"MyPackage\",",
            "                    moduleAliases: [\"Utils\": \"MyPackageUtils\"]",
            "                )",
            "            ]",
            "        )",
            "    ]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This will rename the ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " module in the ",
              "type" : "text"
            },
            {
              "code" : "MyPackage",
              "type" : "codeVoice"
            },
            {
              "text" : " package to the new user-defined unique name, in this case ",
              "type" : "text"
            },
            {
              "code" : "MyPackageUtils",
              "type" : "codeVoice"
            },
            {
              "text" : "; the name of the binary will be ",
              "type" : "text"
            },
            {
              "code" : "MyPackageUtils.swiftmodule",
              "type" : "codeVoice"
            },
            {
              "text" : ". No source or manifest changes are required by the dependency package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use the aliased module your root package can use the new unique name, i.e. ",
              "type" : "text"
            },
            {
              "code" : "import MyPackageUtils",
              "type" : "codeVoice"
            },
            {
              "text" : ", and make it clear that it is importing the utilities module from ",
              "type" : "text"
            },
            {
              "code" : "MyPackage",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Consider the following example to go over how module aliasing can be used in more detail.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Example",
          "level" : 4,
          "text" : "Example",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following example of a package ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            },
            {
              "text" : " imports the modules ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " from a package ",
              "type" : "text"
            },
            {
              "code" : "swift-draw",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It wants to add another package dependency ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " and imports the modules ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "Game",
              "type" : "codeVoice"
            },
            {
              "text" : " vended from the package. The ",
              "type" : "text"
            },
            {
              "code" : "Game",
              "type" : "codeVoice"
            },
            {
              "text" : " module imports ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " from the same package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            " App",
            "   |â€” Module Utils (from package â€˜swift-drawâ€™)",
            "   |â€” Module Logging (from package â€˜swift-drawâ€™)",
            "   |â€” Module Utils (from package â€˜swift-gameâ€™)",
            "   |â€” Module Game (from package â€˜swift-gameâ€™)",
            "        |â€” Module Logging (from package â€˜swift-gameâ€™)"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Package manifest ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "{",
            "    name: \"swift-game\",",
            "    products: [",
            "        .library(name: \"Utils\", targets: [\"Utils\"]),",
            "        .library(name: \"Game\", targets: [\"Game\"]),",
            "    ],",
            "    targets: [",
            "        .target(name: \"Game\", dependencies: [\"Logging\"]),",
            "        .target(name: \"Utils\", dependencies: []),",
            "        .target(name: \"Logging\", dependencies: [])",
            "    ]",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Package manifest ",
              "type" : "text"
            },
            {
              "code" : "swift-draw",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "{",
            "    name: \"swift-draw\",",
            "    products: [",
            "        .library(name: \"Utils\", targets: [\"Utils\"]),",
            "        .library(name: \"Logging\", targets: [\"Logging\"]),",
            "    ],",
            "    targets: [",
            "        .target(name: \"Utils\", dependencies: []),",
            "        .target(name: \"Logging\", dependencies: []),",
            "    ]",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Analyzing-the-conflicts",
          "level" : 5,
          "text" : "Analyzing the conflicts",
          "type" : "heading"
        },
        {
          "anchor" : "Utils-modules",
          "level" : 6,
          "text" : "Utils modules",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Both ",
              "type" : "text"
            },
            {
              "code" : "swift-draw",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " vend modules with the same name ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : ", thus causing a conflict. To resolve the collision, a new parameter ",
              "type" : "text"
            },
            {
              "code" : "moduleAliases",
              "type" : "codeVoice"
            },
            {
              "text" : " can now be used to disambiguate them.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Package manifest ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "    targets: [",
            "        .executableTarget(",
            "            name: \"App\",",
            "            dependencies: [",
            "                .product(name: \"Utils\",",
            "                         package: \"swift-draw\"),",
            "                .product(name: \"Utils\",",
            "                         package: \"swift-game\",",
            "                         moduleAliases: [\"Utils\": \"SwiftGameUtils\"]),",
            "            ])",
            "    ]"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This will rename the ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " module in package ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " as ",
              "type" : "text"
            },
            {
              "code" : "SwiftGameUtils",
              "type" : "codeVoice"
            },
            {
              "text" : "; the name of the binary will be ",
              "type" : "text"
            },
            {
              "code" : "SwiftGameUtils.swiftmodule",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use the aliased module, ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            },
            {
              "text" : " can reference the new package-qualified name, i.e. ",
              "type" : "text"
            },
            {
              "code" : "import SwiftGameUtils",
              "type" : "codeVoice"
            },
            {
              "text" : ". Its existing ",
              "type" : "text"
            },
            {
              "code" : "import Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " statement will continue to reference the ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : " module from package ",
              "type" : "text"
            },
            {
              "code" : "swift-draw",
              "type" : "codeVoice"
            },
            {
              "text" : ", as expected.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that the dependency product names are duplicate, i.e. both have the same name ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : ", which is by default not allowed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, this is allowed when module aliasing is used as long as no files with the same product name are created.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means they must all be automatic library types, or at most one of them can be a static library, dylib, an executable, or any other type that creates a file or a directory with the product name.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Transitive-Logging-modules",
          "level" : 6,
          "text" : "Transitive Logging modules",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Similar to the prior conflict with ",
              "type" : "text"
            },
            {
              "code" : "Utils",
              "type" : "codeVoice"
            },
            {
              "text" : ", both the ",
              "type" : "text"
            },
            {
              "code" : "swift-draw",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " packages contain modules with the same name ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : ", thus causing a conflict.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Although ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            },
            {
              "text" : " does not directly import ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " from ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : ", the conflicting module still needs to be disambiguated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "We can use ",
              "type" : "text"
            },
            {
              "code" : "moduleAliases",
              "type" : "codeVoice"
            },
            {
              "text" : " again, as follows.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Package manifest ",
              "type" : "text"
            },
            {
              "code" : "App",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "    targets: [",
            "        .executableTarget(",
            "            name: \"App\",",
            "            dependencies: [",
            "                \/\/ Utils module aliasing:",
            "                .product(name: \"Utils\",",
            "                         package: \"swift-draw\"),",
            "                .product(name: \"Utils\",",
            "                         package: \"swift-game\",",
            "                         moduleAliases: [\"Utils\": \"SwiftGameUtils\"]),",
            "                \/\/ Logging module aliasing:",
            "                .product(name: \"Logging\",",
            "                         package: \"swift-draw\"),",
            "                .product(name: \"Game\",",
            "                         package: \"swift-game\",",
            "                         moduleAliases: [\"Logging\": \"SwiftGameLogging\"]),",
            "            ])",
            "    ]"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " module from ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " is renamed as ",
              "type" : "text"
            },
            {
              "code" : "SwiftGameLogging",
              "type" : "codeVoice"
            },
            {
              "text" : ", and all the references to ",
              "type" : "text"
            },
            {
              "code" : "Logging",
              "type" : "codeVoice"
            },
            {
              "text" : " in source files of ",
              "type" : "text"
            },
            {
              "code" : "Game",
              "type" : "codeVoice"
            },
            {
              "text" : " are compiled as ",
              "type" : "text"
            },
            {
              "code" : "SwiftGameLogging",
              "type" : "codeVoice"
            },
            {
              "text" : ". Similar to before, no source or manifest changes are required by the ",
              "type" : "text"
            },
            {
              "code" : "swift-game",
              "type" : "codeVoice"
            },
            {
              "text" : " package.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If more aliases need to be defined, they can be added with a comma delimiter, per below.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "    moduleAliases: [\"Utils\": \"SwiftGameUtils\", \"Logging\": \"SwiftGameLogging\"]),"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "anchor" : "Override-Module-Aliases",
          "level" : 3,
          "text" : "Override Module Aliases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If module alias values defined upstream are conflicting downstream, they can be overridden by chaining; add an entry to the ",
              "type" : "text"
            },
            {
              "code" : "moduleAliases",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter downstream using the conflicting alias value as a key and provide a unique value. Since the package identifier is unique to the package, using it as the prefix for the new module alias as a convention should help to prevent more collisions since it can be a generally agreed unique name for the module.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "anchor" : "Guides",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/CreatingSwiftPackage",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SettingSwiftToolsVersion",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/CreatingCLanguageTargets",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingBuildConfigurations",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SwiftVersionSpecificPackaging",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/BundlingResources",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ReleasingPublishingAPackage",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ContinuousIntegration",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/Plugins",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingSwiftPackageRegistry",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageCollections",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingShellCompletion",
        "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SwiftPMAsALibrary"
      ],
      "title" : "Guides"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/packagemanagerdocs\/modulealiasing"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://PackageManagerDocs/documentation/PackageManagerDocs": {
  "abstract" : [
    {
      "text" : "Organize, manage, and edit Swift packages.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Swift Package Manager",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/AddingDependencies": {
  "abstract" : [
    {
      "text" : "Use other swift packages, system libraries, or binary dependencies in your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/AddingDependencies",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Adding dependencies to a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/addingdependencies"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/BundlingResources": {
  "abstract" : [
    {
      "text" : "Add resource files to your Swift package and access them in your code.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/BundlingResources",
  "kind" : "article",
  "role" : "article",
  "title" : "Bundling resources with a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/bundlingresources"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ContinuousIntegration": {
  "abstract" : [
    {
      "text" : "Build Swift packages with an existing continuous integration setup and prepare apps that consume package dependencies within an existing CI pipeline.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ContinuousIntegration",
  "kind" : "article",
  "role" : "article",
  "title" : "Continuous Integration Workflows",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/continuousintegration"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/CreatingCLanguageTargets": {
  "abstract" : [
    {
      "text" : "Include C language code as a target in your Swift package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/CreatingCLanguageTargets",
  "kind" : "article",
  "role" : "article",
  "title" : "Creating C language targets",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/creatingclanguagetargets"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/CreatingSwiftPackage": {
  "abstract" : [
    {
      "text" : "Bundle executable or shareable code into a standalone Swift package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/CreatingSwiftPackage",
  "kind" : "article",
  "role" : "article",
  "title" : "Creating a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/creatingswiftpackage"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/PackageCollections": {
  "abstract" : [
    {
      "text" : "Learn to create, publish and use Swift package collections.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/PackageCollections",
  "kind" : "article",
  "role" : "article",
  "title" : "Package Collections",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/packagecollections"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/Plugins": {
  "abstract" : [
    {
      "text" : "Extend package manager functionality with build or command plugins.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/Plugins",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Plugins",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/plugins"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ReleasingPublishingAPackage": {
  "abstract" : [
    {
      "text" : "Share a specific version of your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ReleasingPublishingAPackage",
  "kind" : "article",
  "role" : "article",
  "title" : "Releasing and publishing a Swift package",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/releasingpublishingapackage"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/ResolvingPackageVersions": {
  "abstract" : [
    {
      "text" : "Coordinate and constrain dependencies for your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/ResolvingPackageVersions",
  "kind" : "article",
  "role" : "article",
  "title" : "Resolving and updating dependencies",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/resolvingpackageversions"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/SettingSwiftToolsVersion": {
  "abstract" : [
    {
      "text" : "Define the minimum version of the swift compiler required for your package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SettingSwiftToolsVersion",
  "kind" : "article",
  "role" : "article",
  "title" : "Setting the Swift tools version",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/settingswifttoolsversion"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/SwiftPMAsALibrary": {
  "abstract" : [
    {
      "text" : "Include Swift Package Manager as a dependency in your Swift package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SwiftPMAsALibrary",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift Package Manager as a library",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/swiftpmasalibrary"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/SwiftVersionSpecificPackaging": {
  "abstract" : [
    {
      "text" : "Provide a package manifest for a specific version of Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/SwiftVersionSpecificPackaging",
  "kind" : "article",
  "role" : "article",
  "title" : "Packaging based on the version of Swift",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/swiftversionspecificpackaging"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/UsingBuildConfigurations": {
  "abstract" : [
    {
      "text" : "Control the build configuration for your app or package.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingBuildConfigurations",
  "kind" : "article",
  "role" : "article",
  "title" : "Using build configurations",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/usingbuildconfigurations"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/UsingShellCompletion": {
  "abstract" : [
    {
      "text" : "Customize your shell to automatically complete swift package commands.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingShellCompletion",
  "kind" : "article",
  "role" : "article",
  "title" : "Using shell completion scripts",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/usingshellcompletion"
},
"doc://PackageManagerDocs/documentation/PackageManagerDocs/UsingSwiftPackageRegistry": {
  "abstract" : [
    {
      "text" : "Configure and use a package registry for Swift Package Manager.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PackageManagerDocs\/documentation\/PackageManagerDocs\/UsingSwiftPackageRegistry",
  "kind" : "article",
  "role" : "article",
  "title" : "Using a package registry",
  "type" : "topic",
  "url" : "\/documentation\/packagemanagerdocs\/usingswiftpackageregistry"
}
}
}