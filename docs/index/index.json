{
  "includedArchiveIdentifiers" : [
    "PackageManagerDocs",
    "org.swift.swiftpm.packageplugin",
    "org.swift.swiftpm.packagedescription"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "children" : [
              {
                "title" : "Essentials",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/gettingstarted",
                "title" : "Getting Started",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/introducingpackages",
                "title" : "Introducing Packages",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/packagesecurity",
                "title" : "Package Security",
                "type" : "article"
              },
              {
                "title" : "Guides",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/creatingswiftpackage",
                "title" : "Creating a Swift package",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/settingswifttoolsversion",
                "title" : "Setting the Swift tools version",
                "type" : "article"
              },
              {
                "children" : [
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/resolvingpackageversions",
                    "title" : "Resolving and updating dependencies",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/resolvingdependencyfailures",
                    "title" : "Resolving package dependency failures",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/addingsystemlibrarydependency",
                    "title" : "Adding a dependency on a system library.",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/examplesystemlibrarypkgconfig",
                    "title" : "Swift package example that uses system library dependency with pkg-config",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/editingdependencypackage",
                    "title" : "Editing a remote dependency used in a Swift package",
                    "type" : "article"
                  }
                ],
                "path" : "\/documentation\/packagemanagerdocs\/addingdependencies",
                "title" : "Adding dependencies to a Swift package",
                "type" : "symbol"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/resolvingpackageversions",
                "title" : "Resolving and updating dependencies",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/creatingclanguagetargets",
                "title" : "Creating C language targets",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/usingbuildconfigurations",
                "title" : "Using build configurations",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/swiftversionspecificpackaging",
                "title" : "Packaging based on the version of Swift",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/bundlingresources",
                "title" : "Bundling resources with a Swift package",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/releasingpublishingapackage",
                "title" : "Releasing and publishing a Swift package",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/continuousintegration",
                "title" : "Continuous Integration Workflows",
                "type" : "article"
              },
              {
                "children" : [
                  {
                    "title" : "Enabling Plugins",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/enablecommandplugin",
                    "title" : "Enable a command plugin",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/enablebuildplugin",
                    "title" : "Enable a build plugin",
                    "type" : "article"
                  },
                  {
                    "title" : "Writing Plugins",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/writingcommandplugin",
                    "title" : "Writing a command plugin",
                    "type" : "article"
                  },
                  {
                    "path" : "\/documentation\/packagemanagerdocs\/writingbuildtoolplugin",
                    "title" : "Writing a build tool plugin",
                    "type" : "article"
                  }
                ],
                "path" : "\/documentation\/packagemanagerdocs\/plugins",
                "title" : "Plugins",
                "type" : "symbol"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/modulealiasing",
                "title" : "Module Aliasing",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/usingswiftpackageregistry",
                "title" : "Using a package registry",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/packagecollections",
                "title" : "Package Collections",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/usingshellcompletion",
                "title" : "Using shell completion scripts",
                "type" : "article"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/swiftpmasalibrary",
                "title" : "Swift Package Manager as a library",
                "type" : "article"
              },
              {
                "title" : "Reference",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/packagedescription",
                "title" : "Package Description",
                "type" : "article"
              },
              {
                "title" : "Swift Commands",
                "type" : "groupMarker"
              },
              {
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftbuild",
                "title" : "swift build",
                "type" : "article"
              },
              {
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swifttest",
                "title" : "swift test",
                "type" : "article"
              },
              {
                "children" : [
                  {
                    "title" : "Creating packages",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageinit",
                    "title" : "swift package init",
                    "type" : "article"
                  },
                  {
                    "title" : "Updating and resolving dependencies",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageupdate",
                    "title" : "swift package update",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageresolve",
                    "title" : "swift package resolve",
                    "type" : "article"
                  },
                  {
                    "title" : "Editing packages",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageadddependency",
                    "title" : "swift package add-dependency",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageaddproduct",
                    "title" : "swift package add-product",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageaddtarget",
                    "title" : "swift package add-target",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageaddtargetdependency",
                    "title" : "swift package add-target-dependency",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageaddsetting",
                    "title" : "swift package add-setting",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageedit",
                    "title" : "swift package edit",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageunedit",
                    "title" : "swift package unedit",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagemigrate",
                    "title" : "swift package migrate",
                    "type" : "article"
                  },
                  {
                    "title" : "Using package manager plugins",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageplugin",
                    "title" : "swift package plugin",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagediagnoseapibreakingchange",
                    "title" : "swift package diagnose-api-breaking-changes",
                    "type" : "article"
                  },
                  {
                    "title" : "Inspecting packages",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagedescribe",
                    "title" : "swift package describe",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageshowdependencies",
                    "title" : "swift package show-dependencies",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageshowexecutables",
                    "title" : "swift package show-executables",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagetoolsversion",
                    "title" : "swift package tools-version",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagedumppackage",
                    "title" : "swift package dump-package",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagedumpsymbolgraph",
                    "title" : "swift package dump-symbol-graph",
                    "type" : "article"
                  },
                  {
                    "title" : "Cleaning builds and caches",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageclean",
                    "title" : "swift package clean",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagereset",
                    "title" : "swift package reset",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagepurgecache",
                    "title" : "swift package purge-cache",
                    "type" : "article"
                  },
                  {
                    "title" : "Archiving packages",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagearchivesource",
                    "title" : "swift package archive-source",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecomputechecksum",
                    "title" : "swift package compute-checksum",
                    "type" : "article"
                  },
                  {
                    "title" : "Integrating Package Manager into your shell",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecompletiontool",
                    "title" : "swift package completion-tool",
                    "type" : "article"
                  },
                  {
                    "title" : "Configuring Mirrors",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageconfigsetmirror",
                    "title" : "swift package config set-mirror",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageconfigunsetmirror",
                    "title" : "swift package config unset-mirror",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageconfiggetmirror",
                    "title" : "swift package config get-mirror",
                    "type" : "article"
                  },
                  {
                    "title" : "Experimental commands",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageexperimentalinstall",
                    "title" : "swift package experimental-install",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageexperimentaluninstall",
                    "title" : "swift package experimental-uninstall",
                    "type" : "article"
                  }
                ],
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftpackagecommands",
                "title" : "swift package",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Installing an SDK",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkinstall",
                    "title" : "swift sdk install",
                    "type" : "article"
                  },
                  {
                    "title" : "Listing SDKs",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdklist",
                    "title" : "swift sdk list",
                    "type" : "article"
                  },
                  {
                    "title" : "Removing an SDK",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkremove",
                    "title" : "swift sdk remove",
                    "type" : "article"
                  },
                  {
                    "title" : "Configuring an SDK",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkconfigure",
                    "title" : "swift sdk configure",
                    "type" : "article"
                  },
                  {
                    "title" : "Deprecated Commands",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkconfigurationset",
                    "title" : "swift sdk configuration set",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkconfigurationshow",
                    "title" : "swift sdk configuration show",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/sdkconfigurationreset",
                    "title" : "swift sdk configuration reset",
                    "type" : "article"
                  }
                ],
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftsdkcommands",
                "title" : "swift sdk",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Adding and Removing Registries",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageregistryset",
                    "title" : "swift package-registry set",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageregistryunset",
                    "title" : "swift package-registry unset",
                    "type" : "article"
                  },
                  {
                    "title" : "Accessing Registries",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageregistrylogin",
                    "title" : "swift package-registry login",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageregistrypublish",
                    "title" : "swift package-registry publish",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packageregistrylogout",
                    "title" : "swift package-registry logout",
                    "type" : "article"
                  }
                ],
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftpackageregistrycommands",
                "title" : "swift package-registry",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Adding a package collection",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectionadd",
                    "title" : "swift package-collection add",
                    "type" : "article"
                  },
                  {
                    "title" : "Finding package collections",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectionsearch",
                    "title" : "swift package-collection search",
                    "type" : "article"
                  },
                  {
                    "title" : "Updating package collection",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectionrefresh",
                    "title" : "swift package-collection refresh",
                    "type" : "article"
                  },
                  {
                    "title" : "Inspecting package collections",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectionlist",
                    "title" : "swift package-collection list",
                    "type" : "article"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectiondescribe",
                    "title" : "swift package-collection describe",
                    "type" : "article"
                  },
                  {
                    "title" : "Removing a package collection",
                    "type" : "groupMarker"
                  },
                  {
                    "icon" : "command-icon.svg",
                    "path" : "\/documentation\/packagemanagerdocs\/packagecollectionremove",
                    "title" : "swift package-collection remove",
                    "type" : "article"
                  }
                ],
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftpackagecollectioncommands",
                "title" : "swift package-collection",
                "type" : "symbol"
              },
              {
                "icon" : "command-icon.svg",
                "path" : "\/documentation\/packagemanagerdocs\/swiftrun",
                "title" : "swift run",
                "type" : "article"
              },
              {
                "title" : "Design",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/packagemanagerdocs\/registryserverspecification",
                "title" : "Swift Package Registry Service Specification",
                "type" : "article"
              }
            ],
            "path" : "\/documentation\/packagemanagerdocs",
            "title" : "Swift Package Manager",
            "type" : "module"
          },
          {
            "children" : [
              {
                "title" : "Implementing Command Plugins",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a Command Plugin",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/commandplugin\/performcommand(context:arguments:)",
                    "title" : "func performCommand(context: PluginContext, arguments: [String]) async throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Accessing the Package Manager",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "children" : [
                          {
                            "path" : "\/documentation\/packageplugin\/commandplugin\/packagemanager-80gjq",
                            "title" : "var packageManager: PackageManager",
                            "type" : "property"
                          }
                        ],
                        "title" : "CommandPlugin Implementations",
                        "type" : "groupMarker"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/commandplugin\/packagemanager",
                    "title" : "var packageManager: PackageManager",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/commandplugin",
                "title" : "CommandPlugin",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting the Context",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/pluginworkdirectoryurl",
                    "title" : "let pluginWorkDirectoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/tool(named:)",
                    "title" : "func tool(named: String) throws -> PluginContext.Tool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/package",
                    "title" : "let package: Package",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/name",
                        "title" : "let name: String",
                        "type" : "property"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/path",
                        "title" : "var path: Path",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/url",
                        "title" : "let url: URL",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugincontext\/tool",
                    "title" : "PluginContext.Tool",
                    "type" : "struct"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/plugincontext\/pluginworkdirectory",
                    "title" : "let pluginWorkDirectory: Path",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/plugincontext",
                "title" : "PluginContext",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a plugin",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugin\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "title" : "Invoking a plugin",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugin\/main()",
                    "title" : "static func main() async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/plugin",
                "title" : "Plugin",
                "type" : "protocol"
              },
              {
                "title" : "Extracting Arguments",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Creating an Argument Extractor",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/argumentextractor\/init(_:)",
                    "title" : "init([String])",
                    "type" : "init"
                  },
                  {
                    "title" : "Inspecting Arguments",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/argumentextractor\/remainingarguments",
                    "title" : "var remainingArguments: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/argumentextractor\/unextractedoptionsorflags",
                    "title" : "var unextractedOptionsOrFlags: [String]",
                    "type" : "property"
                  },
                  {
                    "title" : "Extracting Arguments",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/argumentextractor\/extractflag(named:)",
                    "title" : "func extractFlag(named: String) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/argumentextractor\/extractoption(named:)",
                    "title" : "func extractOption(named: String) -> [String]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/argumentextractor",
                "title" : "ArgumentExtractor",
                "type" : "struct"
              },
              {
                "title" : "Implementing Build Plugins",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a Build Tool Plugin",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/buildtoolplugin\/createbuildcommands(context:target:)",
                    "title" : "func createBuildCommands(context: PluginContext, target: any Target) async throws -> [Command]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/buildtoolplugin",
                "title" : "BuildToolPlugin",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting the Context",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/pluginworkdirectoryurl",
                    "title" : "let pluginWorkDirectoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/tool(named:)",
                    "title" : "func tool(named: String) throws -> PluginContext.Tool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontext\/package",
                    "title" : "let package: Package",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/name",
                        "title" : "let name: String",
                        "type" : "property"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/path",
                        "title" : "var path: Path",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontext\/tool\/url",
                        "title" : "let url: URL",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugincontext\/tool",
                    "title" : "PluginContext.Tool",
                    "type" : "struct"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/plugincontext\/pluginworkdirectory",
                    "title" : "let pluginWorkDirectory: Path",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/plugincontext",
                "title" : "PluginContext",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/id-swift.property",
                    "title" : "var id: Self.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/directoryurl",
                    "title" : "var directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/sourcemodule",
                    "title" : "var sourceModule: (any SourceModuleTarget)?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/dependencies",
                    "title" : "var dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/recursivetargetdependencies",
                    "title" : "var recursiveTargetDependencies: [any Target]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/id-swift.typealias",
                    "title" : "Target.ID",
                    "type" : "typealias"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/target\/directory",
                    "title" : "var directory: Path",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/target",
                "title" : "Target",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Types of Build Commands",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/command\/buildcommand(displayname:executable:arguments:environment:inputfiles:outputfiles:)-swift.enum.case",
                    "title" : "case buildCommand(displayName: String?, executable: URL, arguments: [String], environment: [String : String], inputFiles: [URL], outputFiles: [URL])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/command\/prebuildcommand(displayname:executable:arguments:environment:outputfilesdirectory:)-swift.enum.case",
                    "title" : "case prebuildCommand(displayName: String?, executable: URL, arguments: [String], environment: [String : String], outputFilesDirectory: URL)",
                    "type" : "case"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/command\/buildcommand(displayname:executable:arguments:environment:inputfiles:outputfiles:)-swift.type.method",
                    "title" : "static func buildCommand(displayName: String?, executable: Path, arguments: [any CustomStringConvertible], environment: [String : any CustomStringConvertible], inputFiles: [Path], outputFiles: [Path]) -> Command",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/command\/prebuildcommand(displayname:executable:arguments:environment:outputfilesdirectory:)-swift.type.method",
                    "title" : "static func prebuildCommand(displayName: String?, executable: Path, arguments: [any CustomStringConvertible], environment: [String : any CustomStringConvertible], outputFilesDirectory: Path) -> Command",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/command",
                "title" : "Command",
                "type" : "enum"
              },
              {
                "title" : "Interacting with Package Manager",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Building a Package",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagemanager\/build(_:parameters:)",
                    "title" : "func build(PackageManager.BuildSubset, parameters: PackageManager.BuildParameters) throws -> PackageManager.BuildResult",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Subsets of the Package",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildsubset\/product(_:)",
                        "title" : "case product(String)",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildsubset\/target(_:)",
                        "title" : "case target(String)",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildsubset\/all(includingtests:)",
                        "title" : "case all(includingTests: Bool)",
                        "type" : "case"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildsubset",
                    "title" : "PackageManager.BuildSubset",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating Build Parameters",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/init(configuration:logging:echologs:)",
                        "title" : "init(configuration: PackageManager.BuildConfiguration, logging: PackageManager.BuildLogVerbosity, echoLogs: Bool)",
                        "type" : "init"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Build Configurations",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/inherit",
                            "title" : "case inherit",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/debug",
                            "title" : "case debug",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/release",
                            "title" : "case release",
                            "type" : "case"
                          },
                          {
                            "title" : "Creating a Build Configuration",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration",
                        "title" : "PackageManager.BuildConfiguration",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Verbosity Levels",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/concise",
                            "title" : "case concise",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/debug",
                            "title" : "case debug",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/verbose",
                            "title" : "case verbose",
                            "type" : "case"
                          },
                          {
                            "title" : "Creating a Verbosity Level",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity",
                        "title" : "PackageManager.BuildLogVerbosity",
                        "type" : "enum"
                      },
                      {
                        "title" : "Inspecting Build Parameters",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/configuration",
                        "title" : "var configuration: PackageManager.BuildConfiguration",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/logging",
                        "title" : "var logging: PackageManager.BuildLogVerbosity",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/echologs",
                        "title" : "var echoLogs: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/othercflags",
                        "title" : "var otherCFlags: [String]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/othercxxflags",
                        "title" : "var otherCxxFlags: [String]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/otherlinkerflags",
                        "title" : "var otherLinkerFlags: [String]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters\/otherswiftcflags",
                        "title" : "var otherSwiftcFlags: [String]",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildparameters",
                    "title" : "PackageManager.BuildParameters",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Inspecting a Build Result",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifacts",
                        "title" : "var builtArtifacts: [PackageManager.BuildResult.BuiltArtifact]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/logtext",
                        "title" : "var logText: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/succeeded",
                        "title" : "var succeeded: Bool",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Inspecting a Build Artifact",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.property",
                            "title" : "var kind: PackageManager.BuildResult.BuiltArtifact.Kind",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/url",
                            "title" : "var url: URL",
                            "type" : "property"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/dynamiclibrary",
                                "title" : "case dynamicLibrary",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/executable",
                                "title" : "case executable",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/staticlibrary",
                                "title" : "case staticLibrary",
                                "type" : "case"
                              },
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/init(rawvalue:)",
                                "title" : "init?(rawValue: String)",
                                "type" : "init"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Properties",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/hashvalue",
                                    "title" : "var hashValue: Int",
                                    "type" : "property"
                                  },
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/hash(into:)",
                                    "title" : "func hash(into: inout Hasher)",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum\/rawrepresentable-implementations",
                                "title" : "RawRepresentable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/kind-swift.enum",
                            "title" : "PackageManager.BuildResult.BuiltArtifact.Kind",
                            "type" : "enum"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact\/path",
                            "title" : "var path: Path",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult\/builtartifact",
                        "title" : "PackageManager.BuildResult.BuiltArtifact",
                        "type" : "struct"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildresult",
                    "title" : "PackageManager.BuildResult",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Build Configurations",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/inherit",
                        "title" : "case inherit",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/debug",
                        "title" : "case debug",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/release",
                        "title" : "case release",
                        "type" : "case"
                      },
                      {
                        "title" : "Creating a Build Configuration",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildconfiguration",
                    "title" : "PackageManager.BuildConfiguration",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Verbosity Levels",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/concise",
                        "title" : "case concise",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/debug",
                        "title" : "case debug",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/verbose",
                        "title" : "case verbose",
                        "type" : "case"
                      },
                      {
                        "title" : "Creating a Verbosity Level",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/buildlogverbosity",
                    "title" : "PackageManager.BuildLogVerbosity",
                    "type" : "enum"
                  },
                  {
                    "title" : "Testing a Package",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagemanager\/test(_:parameters:)",
                    "title" : "func test(PackageManager.TestSubset, parameters: PackageManager.TestParameters) throws -> PackageManager.TestResult",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Subsets of Tests",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testsubset\/all",
                        "title" : "case all",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testsubset\/filtered(_:)",
                        "title" : "case filtered([String])",
                        "type" : "case"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/testsubset",
                    "title" : "PackageManager.TestSubset",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating Test Parameters",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testparameters\/init(enablecodecoverage:)",
                        "title" : "init(enableCodeCoverage: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Inspecting Test Parameters",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testparameters\/enablecodecoverage",
                        "title" : "var enableCodeCoverage: Bool",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/testparameters",
                    "title" : "PackageManager.TestParameters",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Inspecting Test Results",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/succeeded",
                        "title" : "var succeeded: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtargets",
                        "title" : "var testTargets: [PackageManager.TestResult.TestTarget]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/codecoveragedatafileurl",
                        "title" : "var codeCoverageDataFileURL: URL?",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Inspecting a Test Target",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/name",
                            "title" : "var name: String",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcases",
                            "title" : "var testCases: [PackageManager.TestResult.TestTarget.TestCase]",
                            "type" : "property"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Inspecting a Test Case",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/name",
                                "title" : "var name: String",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/tests",
                                "title" : "var tests: [PackageManager.TestResult.TestTarget.TestCase.Test]",
                                "type" : "property"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Inspecting a Test in a Test Case",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/name",
                                    "title" : "var name: String",
                                    "type" : "property"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.property",
                                    "title" : "var result: PackageManager.TestResult.TestTarget.TestCase.Test.Result",
                                    "type" : "property"
                                  },
                                  {
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/duration",
                                    "title" : "var duration: Double",
                                    "type" : "property"
                                  },
                                  {
                                    "children" : [
                                      {
                                        "title" : "Test Results",
                                        "type" : "groupMarker"
                                      },
                                      {
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/succeeded",
                                        "title" : "case succeeded",
                                        "type" : "case"
                                      },
                                      {
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/skipped",
                                        "title" : "case skipped",
                                        "type" : "case"
                                      },
                                      {
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/failed",
                                        "title" : "case failed",
                                        "type" : "case"
                                      },
                                      {
                                        "title" : "Creating a Test Result",
                                        "type" : "groupMarker"
                                      },
                                      {
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/init(rawvalue:)",
                                        "title" : "init?(rawValue: String)",
                                        "type" : "init"
                                      },
                                      {
                                        "title" : "Default Implementations",
                                        "type" : "groupMarker"
                                      },
                                      {
                                        "children" : [
                                          {
                                            "title" : "Operators",
                                            "type" : "groupMarker"
                                          },
                                          {
                                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/!=(_:_:)",
                                            "title" : "static func != (Self, Self) -> Bool",
                                            "type" : "op"
                                          }
                                        ],
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/equatable-implementations",
                                        "title" : "Equatable Implementations",
                                        "type" : "symbol"
                                      },
                                      {
                                        "children" : [
                                          {
                                            "title" : "Instance Properties",
                                            "type" : "groupMarker"
                                          },
                                          {
                                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/hashvalue",
                                            "title" : "var hashValue: Int",
                                            "type" : "property"
                                          },
                                          {
                                            "title" : "Instance Methods",
                                            "type" : "groupMarker"
                                          },
                                          {
                                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/hash(into:)",
                                            "title" : "func hash(into: inout Hasher)",
                                            "type" : "method"
                                          }
                                        ],
                                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum\/rawrepresentable-implementations",
                                        "title" : "RawRepresentable Implementations",
                                        "type" : "symbol"
                                      }
                                    ],
                                    "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test\/result-swift.enum",
                                    "title" : "PackageManager.TestResult.TestTarget.TestCase.Test.Result",
                                    "type" : "enum"
                                  }
                                ],
                                "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase\/test",
                                "title" : "PackageManager.TestResult.TestTarget.TestCase.Test",
                                "type" : "struct"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget\/testcase",
                            "title" : "PackageManager.TestResult.TestTarget.TestCase",
                            "type" : "struct"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/testtarget",
                        "title" : "PackageManager.TestResult.TestTarget",
                        "type" : "struct"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/packagemanager\/testresult\/codecoveragedatafile",
                        "title" : "var codeCoverageDataFile: Path?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/testresult",
                    "title" : "PackageManager.TestResult",
                    "type" : "struct"
                  },
                  {
                    "title" : "Retrieving Symbols for a Package",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagemanager\/getsymbolgraph(for:options:)",
                    "title" : "func getSymbolGraph(for: any Target, options: PackageManager.SymbolGraphOptions) throws -> PackageManager.SymbolGraphResult",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating Symbol Graph Options",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/init(minimumaccesslevel:includesynthesized:includespi:emitextensionblocks:)",
                        "title" : "init(minimumAccessLevel: PackageManager.SymbolGraphOptions.AccessLevel, includeSynthesized: Bool, includeSPI: Bool, emitExtensionBlocks: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Inspecting Symbol Graph Options",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/emitextensionblocks",
                        "title" : "var emitExtensionBlocks: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/includespi",
                        "title" : "var includeSPI: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/includesynthesized",
                        "title" : "var includeSynthesized: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/minimumaccesslevel",
                        "title" : "var minimumAccessLevel: PackageManager.SymbolGraphOptions.AccessLevel",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Access Levels",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/public",
                            "title" : "case `public`",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/package",
                            "title" : "case package",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/open",
                            "title" : "case open",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/internal",
                            "title" : "case `internal`",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/private",
                            "title" : "case `private`",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/fileprivate",
                            "title" : "case `fileprivate`",
                            "type" : "case"
                          },
                          {
                            "title" : "Creating an Access Level",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions\/accesslevel",
                        "title" : "PackageManager.SymbolGraphOptions.AccessLevel",
                        "type" : "enum"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphoptions",
                    "title" : "PackageManager.SymbolGraphOptions",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Inspecting Symbol Graph Results",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphresult\/directoryurl",
                        "title" : "var directoryURL: URL",
                        "type" : "property"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphresult\/directorypath",
                        "title" : "var directoryPath: Path",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanager\/symbolgraphresult",
                    "title" : "PackageManager.SymbolGraphResult",
                    "type" : "struct"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/packagemanager",
                "title" : "PackageManager",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Types of Proxy Errors from Package Manager",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagemanagerproxyerror\/unimplemented(_:)",
                    "title" : "case unimplemented(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagemanagerproxyerror\/unspecified(_:)",
                    "title" : "case unspecified(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/packagemanagerproxyerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/packagemanagerproxyerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/packagemanagerproxyerror",
                "title" : "PackageManagerProxyError",
                "type" : "enum"
              },
              {
                "title" : "Inspecting the Package Representation",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting Packages",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/id-swift.property",
                    "title" : "let id: Package.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/displayname",
                    "title" : "let displayName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/toolsversion",
                    "title" : "let toolsVersion: ToolsVersion",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/directoryurl",
                    "title" : "let directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/origin",
                    "title" : "let origin: PackageOrigin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/dependencies",
                    "title" : "let dependencies: [PackageDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/sourcemodules",
                    "title" : "var sourceModules: [any SourceModuleTarget]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/id-swift.typealias",
                    "title" : "Package.ID",
                    "type" : "typealias"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/package\/directory",
                    "title" : "let directory: Path",
                    "type" : "property"
                  },
                  {
                    "title" : "Inspecting Package Targets",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/targets",
                    "title" : "let targets: [any Target]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/targets(named:)",
                    "title" : "func targets(named: [String]) throws -> [any Target]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/targets(oftype:)",
                    "title" : "func targets<T>(ofType: T.Type) -> [T]",
                    "type" : "method"
                  },
                  {
                    "title" : "Inspecting Package Products",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/products",
                    "title" : "let products: [any Product]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/products(named:)",
                    "title" : "func products(named: [String]) throws -> [any Product]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/package\/products(oftype:)",
                    "title" : "func products<T>(ofType: T.Type) -> [T]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/package",
                "title" : "Package",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Tools Version Components",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/toolsversion\/major",
                    "title" : "let major: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/toolsversion\/minor",
                    "title" : "let minor: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/toolsversion\/patch",
                    "title" : "let patch: Int",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/toolsversion",
                "title" : "ToolsVersion",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Package Origins",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packageorigin\/repository(url:displayversion:scmrevision:)",
                    "title" : "case repository(url: String, displayVersion: String, scmRevision: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packageorigin\/registry(identity:displayversion:)",
                    "title" : "case registry(identity: String, displayVersion: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packageorigin\/local(path:)",
                    "title" : "case local(path: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packageorigin\/root",
                    "title" : "case root",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/packageorigin",
                "title" : "PackageOrigin",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Package Dependency",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/packagedependency\/package",
                    "title" : "let package: Package",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/packagedependency",
                "title" : "PackageDependency",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Package Product",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/product\/id-swift.property",
                    "title" : "var id: Self.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/product\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/product\/sourcemodules",
                    "title" : "var sourceModules: [any SourceModuleTarget]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/product\/targets",
                    "title" : "var targets: [any Target]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/product\/id-swift.typealias",
                    "title" : "Product.ID",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/product",
                "title" : "Product",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting an Executable Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/executableproduct\/id",
                    "title" : "let id: ExecutableProduct.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/executableproduct\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/executableproduct\/maintarget",
                    "title" : "let mainTarget: any Target",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/executableproduct\/targets",
                    "title" : "let targets: [any Target]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/executableproduct",
                "title" : "ExecutableProduct",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Library Product",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/libraryproduct\/id",
                    "title" : "let id: LibraryProduct.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/libraryproduct\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.property",
                    "title" : "let kind: LibraryProduct.Kind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/libraryproduct\/targets",
                    "title" : "let targets: [any Target]",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Kinds of Library Targets",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum\/automatic",
                        "title" : "case automatic",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum\/dynamic",
                        "title" : "case dynamic",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum\/static",
                        "title" : "case `static`",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/libraryproduct\/kind-swift.enum",
                    "title" : "LibraryProduct.Kind",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/libraryproduct",
                "title" : "LibraryProduct",
                "type" : "struct"
              },
              {
                "title" : "Inspecting Package Targets",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/id-swift.property",
                    "title" : "var id: Self.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/directoryurl",
                    "title" : "var directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/sourcemodule",
                    "title" : "var sourceModule: (any SourceModuleTarget)?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/dependencies",
                    "title" : "var dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/recursivetargetdependencies",
                    "title" : "var recursiveTargetDependencies: [any Target]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/target\/id-swift.typealias",
                    "title" : "Target.ID",
                    "type" : "typealias"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/target\/directory",
                    "title" : "var directory: Path",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/target",
                "title" : "Target",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Target Dependencies",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/targetdependency\/product(_:)",
                    "title" : "case product(any Product)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/targetdependency\/target(_:)",
                    "title" : "case target(any Target)",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/targetdependency",
                "title" : "TargetDependency",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Source Module Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/modulename",
                    "title" : "var moduleName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/kind",
                    "title" : "var kind: ModuleKind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/linkedlibraries",
                    "title" : "var linkedLibraries: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/linkedframeworks",
                    "title" : "var linkedFrameworks: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/plugingeneratedsources",
                    "title" : "var pluginGeneratedSources: [URL]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/plugingeneratedresources",
                    "title" : "var pluginGeneratedResources: [URL]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/sourcefiles",
                    "title" : "var sourceFiles: FileList",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/sourcemoduletarget\/sourcefiles(withsuffix:)",
                    "title" : "func sourceFiles(withSuffix: String) -> FileList",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/sourcemoduletarget",
                "title" : "SourceModuleTarget",
                "type" : "protocol"
              },
              {
                "children" : [
                  {
                    "title" : "Kinds of Modules",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/modulekind\/executable",
                    "title" : "case executable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/modulekind\/test",
                    "title" : "case test",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/modulekind\/generic",
                    "title" : "case generic",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/modulekind\/macro",
                    "title" : "case macro",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/modulekind\/snippet",
                    "title" : "case snippet",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/modulekind\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/modulekind\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/modulekind",
                "title" : "ModuleKind",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Swift Source Module Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/id",
                    "title" : "let id: SwiftSourceModuleTarget.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/kind",
                    "title" : "let kind: ModuleKind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/modulename",
                    "title" : "let moduleName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/directoryurl",
                    "title" : "let directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/dependencies",
                    "title" : "let dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/compilationconditions",
                    "title" : "let compilationConditions: [String]",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/directory",
                    "title" : "let directory: Path",
                    "type" : "property"
                  },
                  {
                    "title" : "Source Files",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/sourcefiles",
                    "title" : "let sourceFiles: FileList",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/sourcefiles(withsuffix:)",
                    "title" : "func sourceFiles(withSuffix: String) -> FileList",
                    "type" : "method"
                  },
                  {
                    "title" : "Plugin Sources and Resources",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/plugingeneratedsources",
                    "title" : "let pluginGeneratedSources: [URL]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/plugingeneratedresources",
                    "title" : "let pluginGeneratedResources: [URL]",
                    "type" : "property"
                  },
                  {
                    "title" : "Linked Library and Frameworks",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/linkedlibraries",
                    "title" : "let linkedLibraries: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/linkedframeworks",
                    "title" : "let linkedFrameworks: [String]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/sourcefiles(withsuffix:)",
                        "title" : "func sourceFiles(withSuffix: String) -> FileList",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/sourcemoduletarget-implementations",
                    "title" : "SourceModuleTarget Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/recursivetargetdependencies",
                        "title" : "var recursiveTargetDependencies: [any Target]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/sourcemodule",
                        "title" : "var sourceModule: (any SourceModuleTarget)?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget\/target-implementations",
                    "title" : "Target Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/swiftsourcemoduletarget",
                "title" : "SwiftSourceModuleTarget",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting a Clang Source Module Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/id",
                    "title" : "let id: ClangSourceModuleTarget.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/kind",
                    "title" : "let kind: ModuleKind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/modulename",
                    "title" : "let moduleName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/directoryurl",
                    "title" : "let directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/dependencies",
                    "title" : "let dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/headersearchpaths",
                    "title" : "let headerSearchPaths: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/preprocessordefinitions",
                    "title" : "let preprocessorDefinitions: [String]",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/directory",
                    "title" : "let directory: Path",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/publicheadersdirectory",
                    "title" : "let publicHeadersDirectory: Path?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/publicheadersdirectoryurl",
                    "title" : "let publicHeadersDirectoryURL: URL?",
                    "type" : "property"
                  },
                  {
                    "title" : "Source Files",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/sourcefiles",
                    "title" : "let sourceFiles: FileList",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/sourcefiles(withsuffix:)",
                    "title" : "func sourceFiles(withSuffix: String) -> FileList",
                    "type" : "method"
                  },
                  {
                    "title" : "Plugin Sources and Resources",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/plugingeneratedsources",
                    "title" : "let pluginGeneratedSources: [URL]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/plugingeneratedresources",
                    "title" : "let pluginGeneratedResources: [URL]",
                    "type" : "property"
                  },
                  {
                    "title" : "Linked Library and Frameworks",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/linkedlibraries",
                    "title" : "let linkedLibraries: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/linkedframeworks",
                    "title" : "let linkedFrameworks: [String]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/sourcefiles(withsuffix:)",
                        "title" : "func sourceFiles(withSuffix: String) -> FileList",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/sourcemoduletarget-implementations",
                    "title" : "SourceModuleTarget Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/recursivetargetdependencies",
                        "title" : "var recursiveTargetDependencies: [any Target]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/sourcemodule",
                        "title" : "var sourceModule: (any SourceModuleTarget)?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget\/target-implementations",
                    "title" : "Target Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/clangsourcemoduletarget",
                "title" : "ClangSourceModuleTarget",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting the Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/id",
                    "title" : "let id: BinaryArtifactTarget.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/name",
                    "title" : "let name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.property",
                    "title" : "let kind: BinaryArtifactTarget.Kind",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.property",
                    "title" : "let origin: BinaryArtifactTarget.Origin",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/artifacturl",
                    "title" : "let artifactURL: URL",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/dependencies",
                    "title" : "let dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/directoryurl",
                    "title" : "let directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.enum\/artifactsarchive",
                        "title" : "case artifactsArchive",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.enum\/xcframework",
                        "title" : "case xcframework",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.enum\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.enum\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/kind-swift.enum",
                    "title" : "BinaryArtifactTarget.Kind",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.enum\/local",
                        "title" : "case local",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.enum\/remote(url:)",
                        "title" : "case remote(url: String)",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.enum\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.enum\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/origin-swift.enum",
                    "title" : "BinaryArtifactTarget.Origin",
                    "type" : "enum"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/artifact",
                    "title" : "let artifact: Path",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/directory",
                    "title" : "let directory: Path",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/recursivetargetdependencies",
                        "title" : "var recursiveTargetDependencies: [any Target]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/sourcemodule",
                        "title" : "var sourceModule: (any SourceModuleTarget)?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/binaryartifacttarget\/target-implementations",
                    "title" : "Target Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/binaryartifacttarget",
                "title" : "BinaryArtifactTarget",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting the System Library Target",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/id",
                    "title" : "let id: SystemLibraryTarget.ID",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/pkgconfig",
                    "title" : "let pkgConfig: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/dependencies",
                    "title" : "var dependencies: [TargetDependency]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/compilerflags",
                    "title" : "let compilerFlags: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/linkerflags",
                    "title" : "let linkerFlags: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/directoryurl",
                    "title" : "var directoryURL: URL",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/directory",
                    "title" : "var directory: Path",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/recursivetargetdependencies",
                        "title" : "var recursiveTargetDependencies: [any Target]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/sourcemodule",
                        "title" : "var sourceModule: (any SourceModuleTarget)?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/systemlibrarytarget\/target-implementations",
                    "title" : "Target Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/systemlibrarytarget",
                "title" : "SystemLibraryTarget",
                "type" : "struct"
              },
              {
                "title" : "Inspecting Package Files",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/formindex(before:)",
                        "title" : "func formIndex(before: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/filelist\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/formindex(after:)",
                        "title" : "func formIndex(after: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/indices(where:)",
                        "title" : "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/map(_:)-1989u",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/removingsubranges(_:)",
                        "title" : "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/subscript(_:)",
                        "title" : "subscript(Int) -> File",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/subscript(_:)-1ofas",
                        "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/filelist\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/filelist\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/filelist\/iterator\/next()",
                            "title" : "func next() -> File?",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/filelist\/iterator",
                        "title" : "FileList.Iterator",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/filelist\/flatmap(_:)-5lmbq",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/flatmap(_:)-7ewtw",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/makeiterator()",
                        "title" : "func makeIterator() -> FileList.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/map(_:)-36w3y",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/sorted(using:)-6s1a2",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/sorted(using:)-9qgak",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filelist\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/filelist\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/filelist",
                "title" : "FileList",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Inspecting the File",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/file\/type",
                    "title" : "let type: FileType",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/file\/url",
                    "title" : "let url: URL",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/file\/path",
                    "title" : "var path: Path",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/file",
                "title" : "File",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Types of Files",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/filetype\/source",
                    "title" : "case source",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/filetype\/header",
                    "title" : "case header",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/filetype\/resource",
                    "title" : "case resource",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/filetype\/unknown",
                    "title" : "case unknown",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/filetype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/filetype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/filetype",
                "title" : "FileType",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/init(_:)",
                    "title" : "init(String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/extension",
                    "title" : "var `extension`: String?",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/lastcomponent",
                    "title" : "var lastComponent: String",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/stem",
                    "title" : "var stem: String",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/string",
                    "title" : "var string: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/appending(_:)-3f7dc",
                    "title" : "func appending(String...) -> Path",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/appending(_:)-bdm3",
                    "title" : "func appending([String]) -> Path",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/appending(subpath:)",
                    "title" : "func appending(subpath: String) -> Path",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packageplugin\/path\/removinglastcomponent()",
                    "title" : "func removingLastComponent() -> Path",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/path\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/path\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/path\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/path\/decodable-implementations",
                    "title" : "Decodable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/path\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/path\/encodable-implementations",
                    "title" : "Encodable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/path\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/path\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "deprecated" : true,
                "path" : "\/documentation\/packageplugin\/path",
                "title" : "Path",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/pathlist\/iterator\/next()",
                            "title" : "func next() -> Path?",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/pathlist\/iterator",
                        "title" : "PathList.Iterator",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/count(where:)",
                        "title" : "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/droplast(_:)",
                        "title" : "func dropLast(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/pathlist\/flatmap(_:)-2goik",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/flatmap(_:)-ohur",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/makeiterator()",
                        "title" : "func makeIterator() -> PathList.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/map(_:)",
                        "title" : "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/prefix(_:)",
                        "title" : "func prefix(Int) -> PrefixSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/sorted(using:)-35tqa",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/sorted(using:)-776pm",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/suffix(_:)",
                        "title" : "func suffix(Int) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/pathlist\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/pathlist\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "deprecated" : true,
                "path" : "\/documentation\/packageplugin\/pathlist",
                "title" : "PathList",
                "type" : "struct"
              },
              {
                "title" : "Plugin Diagnostics and Errors",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Emitting Errors and Diagnostics",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/diagnostics\/progress(_:)",
                    "title" : "static func progress(String)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/diagnostics\/error(_:file:line:)",
                    "title" : "static func error(String, file: String?, line: Int?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/diagnostics\/warning(_:file:line:)",
                    "title" : "static func warning(String, file: String?, line: Int?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/diagnostics\/remark(_:file:line:)",
                    "title" : "static func remark(String, file: String?, line: Int?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/diagnostics\/emit(_:_:file:line:)",
                    "title" : "static func emit(Diagnostics.Severity, String, file: String?, line: Int?)",
                    "type" : "method"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/error",
                        "title" : "case error",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/remark",
                        "title" : "case remark",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/warning",
                        "title" : "case warning",
                        "type" : "case"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/encode(to:)",
                            "title" : "func encode(to: any Encoder) throws",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packageplugin\/diagnostics\/severity\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/diagnostics\/severity",
                    "title" : "Diagnostics.Severity",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/diagnostics",
                "title" : "Diagnostics",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Errors from the Plugin Context",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/productnotfound(name:package:)",
                    "title" : "case productNotFound(name: String, package: Package)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/targetnotfound(name:package:)",
                    "title" : "case targetNotFound(name: String, package: Package)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/toolnotfound(name:)",
                    "title" : "case toolNotFound(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/toolnotsupportedontargetplatform(name:)",
                    "title" : "case toolNotSupportedOnTargetPlatform(name: String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontexterror\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugincontexterror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugincontexterror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/plugincontexterror",
                "title" : "PluginContextError",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Errors while deserializing",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/missingbuildtoolpluginprotocolconformance(protocolname:)",
                    "title" : "case missingBuildToolPluginProtocolConformance(protocolName: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/missingcommandpluginprotocolconformance(protocolname:)",
                    "title" : "case missingCommandPluginProtocolConformance(protocolName: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/missingxcodeprojectpluginsupport",
                    "title" : "case missingXcodeProjectPluginSupport",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/malformedinputjson(_:)",
                    "title" : "case malformedInputJSON(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/internalerror(_:)",
                    "title" : "case internalError(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/plugindeserializationerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/plugindeserializationerror",
                "title" : "PluginDeserializationError",
                "type" : "enum"
              },
              {
                "title" : "Extended Modules",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Extended Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packageplugin\/swift\/defaultstringinterpolation\/appendinterpolation(_:)",
                        "title" : "func appendInterpolation(Path)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packageplugin\/swift\/defaultstringinterpolation",
                    "title" : "DefaultStringInterpolation",
                    "type" : "extension"
                  }
                ],
                "path" : "\/documentation\/packageplugin\/swift",
                "title" : "Swift",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/packageplugin",
            "title" : "PackagePlugin",
            "type" : "module"
          },
          {
            "children" : [
              {
                "title" : "Creating a Package",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a Package",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/init(name:defaultlocalization:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguagemodes:clanguagestandard:cxxlanguagestandard:)",
                    "title" : "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageModes: [SwiftLanguageMode]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/init(name:defaultlocalization:platforms:pkgconfig:providers:products:traits:dependencies:targets:swiftlanguagemodes:clanguagestandard:cxxlanguagestandard:)",
                    "title" : "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], traits: Set<Trait>, dependencies: [Package.Dependency], targets: [Target], swiftLanguageModes: [SwiftLanguageMode]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packagedescription\/package\/init(name:defaultlocalization:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)",
                    "title" : "init(name: String, defaultLocalization: LanguageTag?, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/init(name:platforms:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)",
                    "title" : "init(name: String, platforms: [SupportedPlatform]?, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/init(name:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)-7ld3y",
                    "title" : "init(name: String, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [Int]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/init(name:pkgconfig:providers:products:dependencies:targets:swiftlanguageversions:clanguagestandard:cxxlanguagestandard:)-767rj",
                    "title" : "init(name: String, pkgConfig: String?, providers: [SystemPackageProvider]?, products: [Product], dependencies: [Package.Dependency], targets: [Target], swiftLanguageVersions: [SwiftVersion]?, cLanguageStandard: CLanguageStandard?, cxxLanguageStandard: CXXLanguageStandard?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Naming the Package",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Localizing Package Resources",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/defaultlocalization",
                    "title" : "var defaultLocalization: LanguageTag?",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating a Language Tag",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/init(stringliteral:)",
                        "title" : "init(stringLiteral: String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/rawvalue",
                        "title" : "var rawValue: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Describing a Language Tag",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Hashing",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Operator Functions",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/languagetag\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/description",
                            "title" : "var description: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/customstringconvertible-implementations",
                        "title" : "CustomStringConvertible Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(extendedgraphemeclusterliteral:)",
                            "title" : "init(extendedGraphemeClusterLiteral: String)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(unicodescalarliteral:)-22z0a",
                            "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(extendedgraphemeclusterliteral:)-1merv",
                            "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(stringliteral:)",
                            "title" : "init(stringLiteral: String)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/expressiblebystringliteral-implementations",
                        "title" : "ExpressibleByStringLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(unicodescalarliteral:)",
                            "title" : "init(unicodeScalarLiteral: String)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/expressiblebyunicodescalarliteral-implementations",
                        "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/rawvalue",
                            "title" : "var rawValue: String",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/languagetag\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/languagetag\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/languagetag",
                    "title" : "LanguageTag",
                    "type" : "struct"
                  },
                  {
                    "title" : "Configuring Products",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/products",
                    "title" : "var products: [Product]",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating a Library Product",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/product\/library(name:type:targets:)",
                        "title" : "static func library(name: String, type: Product.Library.LibraryType?, targets: [String]) -> Product",
                        "type" : "method"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Describing a Library Product",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/product\/library\/targets",
                            "title" : "let targets: [String]",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/product\/library\/type",
                            "title" : "let type: Product.Library.LibraryType?",
                            "type" : "property"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/dynamic",
                                "title" : "case dynamic",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/static",
                                "title" : "case `static`",
                                "type" : "case"
                              },
                              {
                                "title" : "Hashing",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Operator Functions",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "title" : "Creating a Value",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/init(rawvalue:)",
                                "title" : "init?(rawValue: String)",
                                "type" : "init"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Properties",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/hashvalue",
                                    "title" : "var hashValue: Int",
                                    "type" : "property"
                                  },
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/hash(into:)",
                                    "title" : "func hash(into: inout Hasher)",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/product\/library\/librarytype\/rawrepresentable-implementations",
                                "title" : "RawRepresentable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/product\/library\/librarytype",
                            "title" : "Product.Library.LibraryType",
                            "type" : "enum"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/product\/library",
                        "title" : "Product.Library",
                        "type" : "class"
                      },
                      {
                        "title" : "Creating an Executable Product",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/product\/executable(name:targets:)",
                        "title" : "static func executable(name: String, targets: [String]) -> Product",
                        "type" : "method"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Describing an executable product",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/product\/executable\/targets",
                            "title" : "let targets: [String]",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/product\/executable",
                        "title" : "Product.Executable",
                        "type" : "class"
                      },
                      {
                        "title" : "Creating a Plugin Product",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/product\/plugin(name:targets:)",
                        "title" : "static func plugin(name: String, targets: [String]) -> Product",
                        "type" : "method"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Describing a plug-in product",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/product\/plugin\/targets",
                            "title" : "let targets: [String]",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/product\/plugin",
                        "title" : "Product.Plugin",
                        "type" : "class"
                      },
                      {
                        "title" : "Naming the product",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/product\/name",
                        "title" : "let name: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/product",
                    "title" : "Product",
                    "type" : "class"
                  },
                  {
                    "title" : "Configuring Targets",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/targets",
                    "title" : "var targets: [Target]",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Naming the Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/name",
                        "title" : "var name: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Configuring File Locations",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/path",
                        "title" : "var path: String?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/exclude",
                        "title" : "var exclude: [String]",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/sources",
                        "title" : "var sources: [String]?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/resources",
                        "title" : "var resources: [Resource]?",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Applying Rules",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/resource\/process(_:localization:)",
                            "title" : "static func process(String, localization: Resource.Localization?) -> Resource",
                            "type" : "method"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/base",
                                "title" : "case base",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/default",
                                "title" : "case `default`",
                                "type" : "case"
                              },
                              {
                                "title" : "Hashing",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Operator Functions",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "title" : "Creating a Value",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/init(rawvalue:)",
                                "title" : "init?(rawValue: String)",
                                "type" : "init"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/resource\/localization\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Properties",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/resource\/localization\/hashvalue",
                                    "title" : "var hashValue: Int",
                                    "type" : "property"
                                  },
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/resource\/localization\/hash(into:)",
                                    "title" : "func hash(into: inout Hasher)",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/resource\/localization\/rawrepresentable-implementations",
                                "title" : "RawRepresentable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/resource\/localization",
                            "title" : "Resource.Localization",
                            "type" : "enum"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/resource\/copy(_:)",
                            "title" : "static func copy(String) -> Resource",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/resource\/embedincode(_:)",
                            "title" : "static func embedInCode(String) -> Resource",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/resource",
                        "title" : "Resource",
                        "type" : "struct"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/publicheaderspath",
                        "title" : "var publicHeadersPath: String?",
                        "type" : "property"
                      },
                      {
                        "title" : "Creating a Binary Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/binarytarget(name:path:)",
                        "title" : "static func binaryTarget(name: String, path: String) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/binarytarget(name:url:checksum:)",
                        "title" : "static func binaryTarget(name: String, url: String, checksum: String) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/url",
                        "title" : "var url: String?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/checksum",
                        "title" : "var checksum: String?",
                        "type" : "property"
                      },
                      {
                        "title" : "Creating a System Library Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/systemlibrary(name:path:pkgconfig:providers:)",
                        "title" : "static func systemLibrary(name: String, path: String?, pkgConfig: String?, providers: [SystemPackageProvider]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/pkgconfig",
                        "title" : "let pkgConfig: String?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/providers",
                        "title" : "let providers: [SystemPackageProvider]?",
                        "type" : "property"
                      },
                      {
                        "title" : "Creating an Executable Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/executabletarget(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                        "title" : "static func executableTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "title" : "Creating a Regular Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/target(name:dependencies:path:exclude:sources:resources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                        "title" : "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/target(name:dependencies:path:exclude:sources:publicheaderspath:csettings:cxxsettings:swiftsettings:linkersettings:)",
                        "title" : "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, publicHeadersPath: String?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/target(name:dependencies:path:exclude:sources:publicheaderspath:)",
                        "title" : "static func target(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, publicHeadersPath: String?) -> Target",
                        "type" : "method"
                      },
                      {
                        "title" : "Creating a Test Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/testtarget(name:dependencies:path:exclude:sources:resources:packageaccess:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, packageAccess: Bool, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/testtarget(name:dependencies:path:exclude:sources:resources:csettings:cxxsettings:swiftsettings:linkersettings:plugins:)",
                        "title" : "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?, plugins: [Target.PluginUsage]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/testtarget(name:dependencies:path:exclude:sources:resources:csettings:cxxsettings:swiftsettings:linkersettings:)",
                        "title" : "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, resources: [Resource]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/testtarget(name:dependencies:path:exclude:sources:csettings:cxxsettings:swiftsettings:linkersettings:)",
                        "title" : "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, cSettings: [CSetting]?, cxxSettings: [CXXSetting]?, swiftSettings: [SwiftSetting]?, linkerSettings: [LinkerSetting]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/testtarget(name:dependencies:path:exclude:sources:)",
                        "title" : "static func testTarget(name: String, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "title" : "Creating a Plugin Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/plugin(name:capability:dependencies:path:exclude:sources:packageaccess:)",
                        "title" : "static func plugin(name: String, capability: Target.PluginCapability, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?, packageAccess: Bool) -> Target",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/plugincapability-swift.property",
                        "title" : "var pluginCapability: Target.PluginCapability?",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a Plugin Capability",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/plugincapability-swift.enum\/buildtool()",
                            "title" : "static func buildTool() -> Target.PluginCapability",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/plugincapability-swift.enum\/command(intent:permissions:)",
                            "title" : "case command(intent: PluginCommandIntent, permissions: [PluginPermission])",
                            "type" : "case"
                          },
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/plugincapability-swift.enum\/buildtool",
                            "title" : "case buildTool",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/target\/plugincapability-swift.enum",
                        "title" : "Target.PluginCapability",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a Command Intent",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/plugincommandintent\/documentationgeneration()",
                            "title" : "static func documentationGeneration() -> PluginCommandIntent",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/plugincommandintent\/sourcecodeformatting()",
                            "title" : "static func sourceCodeFormatting() -> PluginCommandIntent",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/plugincommandintent\/custom(verb:description:)",
                            "title" : "case custom(verb: String, description: String)",
                            "type" : "case"
                          },
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/plugincommandintent\/documentationgeneration",
                            "title" : "case documentationGeneration",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/plugincommandintent\/sourcecodeformatting",
                            "title" : "case sourceCodeFormatting",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/plugincommandintent",
                        "title" : "PluginCommandIntent",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Create a permission",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/pluginpermission\/allownetworkconnections(scope:reason:)",
                            "title" : "case allowNetworkConnections(scope: PluginNetworkPermissionScope, reason: String)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/pluginpermission\/writetopackagedirectory(reason:)",
                            "title" : "case writeToPackageDirectory(reason: String)",
                            "type" : "case"
                          },
                          {
                            "title" : "Allow network connection",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/all(ports:)-swift.enum.case",
                                "title" : "case all(ports: [Int])",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/docker",
                                "title" : "case docker",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/local(ports:)-swift.enum.case",
                                "title" : "case local(ports: [Int])",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/none",
                                "title" : "case none",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/unixdomainsocket",
                                "title" : "case unixDomainSocket",
                                "type" : "case"
                              },
                              {
                                "title" : "Type Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/all(ports:)-swift.type.method",
                                "title" : "static func all(ports: Range<Int>) -> PluginNetworkPermissionScope",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope\/local(ports:)-swift.type.method",
                                "title" : "static func local(ports: Range<Int>) -> PluginNetworkPermissionScope",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/pluginnetworkpermissionscope",
                            "title" : "PluginNetworkPermissionScope",
                            "type" : "enum"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/pluginpermission",
                        "title" : "PluginPermission",
                        "type" : "enum"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/plugin(name:capability:dependencies:path:exclude:sources:)",
                        "title" : "static func plugin(name: String, capability: Target.PluginCapability, dependencies: [Target.Dependency], path: String?, exclude: [String], sources: [String]?) -> Target",
                        "type" : "method"
                      },
                      {
                        "title" : "Declaring a Dependency Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/dependencies",
                        "title" : "var dependencies: [Target.Dependency]",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a Target Dependency",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/product(name:package:modulealiases:condition:)",
                            "title" : "static func product(name: String, package: String, moduleAliases: [String : String]?, condition: TargetDependencyCondition?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/productitem(name:package:modulealiases:condition:)",
                            "title" : "case productItem(name: String, package: String?, moduleAliases: [String : String]?, condition: TargetDependencyCondition?)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/target(name:condition:)",
                            "title" : "static func target(name: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/targetitem(name:condition:)",
                            "title" : "case targetItem(name: String, condition: TargetDependencyCondition?)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/byname(name:condition:)",
                            "title" : "static func byName(name: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/bynameitem(name:condition:)",
                            "title" : "case byNameItem(name: String, condition: TargetDependencyCondition?)",
                            "type" : "case"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Creating a Dependency Condition",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:)-5bxhc",
                                "title" : "static func when(platforms: [Platform]) -> TargetDependencyCondition?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(traits:)",
                                "title" : "static func when(traits: Set<String>) -> TargetDependencyCondition?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:traits:)",
                                "title" : "static func when(platforms: [Platform], traits: Set<String>) -> TargetDependencyCondition?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:)-4djh6",
                                "title" : "static func when(platforms: [Platform]?) -> TargetDependencyCondition",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/targetdependencycondition",
                            "title" : "TargetDependencyCondition",
                            "type" : "struct"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/init(stringliteral:)",
                            "title" : "init(stringLiteral: String)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/product(name:package:condition:)",
                            "title" : "static func product(name: String, package: String, condition: TargetDependencyCondition?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/product(name:package:)-fp0j",
                            "title" : "static func product(name: String, package: String?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/product(name:package:)-2nako",
                            "title" : "static func product(name: String, package: String) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/productitem(name:package:condition:)",
                            "title" : "static func productItem(name: String, package: String?, condition: TargetDependencyCondition?) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/target(name:)",
                            "title" : "static func target(name: String) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/byname(name:)",
                            "title" : "static func byName(name: String) -> Target.Dependency",
                            "type" : "method"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/dependency\/init(unicodescalarliteral:)",
                                "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/expressiblebyextendedgraphemeclusterliteral-implementations",
                            "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/dependency\/init(extendedgraphemeclusterliteral:)",
                                "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                                "type" : "init"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/dependency\/init(stringliteral:)",
                                "title" : "init(stringLiteral: String)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/dependency\/expressiblebystringliteral-implementations",
                            "title" : "ExpressibleByStringLiteral Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/target\/dependency",
                        "title" : "Target.Dependency",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a Dependency Condition",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:)-5bxhc",
                            "title" : "static func when(platforms: [Platform]) -> TargetDependencyCondition?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(traits:)",
                            "title" : "static func when(traits: Set<String>) -> TargetDependencyCondition?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:traits:)",
                            "title" : "static func when(platforms: [Platform], traits: Set<String>) -> TargetDependencyCondition?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/targetdependencycondition\/when(platforms:)-4djh6",
                            "title" : "static func when(platforms: [Platform]?) -> TargetDependencyCondition",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/targetdependencycondition",
                        "title" : "TargetDependencyCondition",
                        "type" : "struct"
                      },
                      {
                        "title" : "Configuring the Target",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/csettings",
                        "title" : "var cSettings: [CSetting]?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/cxxsettings",
                        "title" : "var cxxSettings: [CXXSetting]?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/swiftsettings",
                        "title" : "var swiftSettings: [SwiftSetting]?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/linkersettings",
                        "title" : "var linkerSettings: [LinkerSetting]?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/plugins",
                        "title" : "var plugins: [Target.PluginUsage]?",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Describing Build Configurations",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildconfiguration\/debug",
                            "title" : "static let debug: BuildConfiguration",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildconfiguration\/release",
                            "title" : "static let release: BuildConfiguration",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/buildconfiguration",
                        "title" : "BuildConfiguration",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Checking for a Build Condition",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildsettingcondition\/when(platforms:)",
                            "title" : "static func when(platforms: [Platform]) -> BuildSettingCondition",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildsettingcondition\/when(configuration:)",
                            "title" : "static func when(configuration: BuildConfiguration) -> BuildSettingCondition",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildsettingcondition\/when(platforms:configuration:)-475co",
                            "title" : "static func when(platforms: [Platform], configuration: BuildConfiguration) -> BuildSettingCondition",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/buildsettingcondition\/when(platforms:configuration:traits:)",
                            "title" : "static func when(platforms: [Platform]?, configuration: BuildConfiguration?, traits: Set<String>?) -> BuildSettingCondition",
                            "type" : "method"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/buildsettingcondition\/when(platforms:configuration:)-2991l",
                            "title" : "static func when(platforms: [Platform]?, configuration: BuildConfiguration?) -> BuildSettingCondition",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/buildsettingcondition",
                        "title" : "BuildSettingCondition",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Configuring C Settings",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/define(_:to:_:)",
                            "title" : "static func define(String, to: String?, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/headersearchpath(_:_:)",
                            "title" : "static func headerSearchPath(String, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/unsafeflags(_:_:)",
                            "title" : "static func unsafeFlags([String], BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/disablewarning(_:_:)",
                            "title" : "static func disableWarning(String, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/enablewarning(_:_:)",
                            "title" : "static func enableWarning(String, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/treatallwarnings(as:_:)",
                            "title" : "static func treatAllWarnings(as: WarningLevel, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/csetting\/treatwarning(_:as:_:)",
                            "title" : "static func treatWarning(String, as: WarningLevel, BuildSettingCondition?) -> CSetting",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/csetting",
                        "title" : "CSetting",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Configuring CXX Settings",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/define(_:to:_:)",
                            "title" : "static func define(String, to: String?, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/headersearchpath(_:_:)",
                            "title" : "static func headerSearchPath(String, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/unsafeflags(_:_:)",
                            "title" : "static func unsafeFlags([String], BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/disablewarning(_:_:)",
                            "title" : "static func disableWarning(String, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/enablewarning(_:_:)",
                            "title" : "static func enableWarning(String, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/treatallwarnings(as:_:)",
                            "title" : "static func treatAllWarnings(as: WarningLevel, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxsetting\/treatwarning(_:as:_:)",
                            "title" : "static func treatWarning(String, as: WarningLevel, BuildSettingCondition?) -> CXXSetting",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/cxxsetting",
                        "title" : "CXXSetting",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Configuring Swift Settings",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/define(_:_:)",
                            "title" : "static func define(String, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/unsafeflags(_:_:)",
                            "title" : "static func unsafeFlags([String], BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/treatallwarnings(as:_:)",
                            "title" : "static func treatAllWarnings(as: WarningLevel, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/treatwarning(_:as:_:)",
                            "title" : "static func treatWarning(String, as: WarningLevel, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Configuring Swift Language Mode",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/swiftlanguagemode(_:_:)",
                            "title" : "static func swiftLanguageMode(SwiftLanguageMode, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Configuring Swift Concurrency",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/strictmemorysafety(_:)",
                            "title" : "static func strictMemorySafety(BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/defaultisolation(_:_:)",
                            "title" : "static func defaultIsolation(MainActor.Type?, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Configuring Swift Experimental and Upcoming Features",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/enableexperimentalfeature(_:_:)",
                            "title" : "static func enableExperimentalFeature(String, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/enableupcomingfeature(_:_:)",
                            "title" : "static func enableUpcomingFeature(String, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "title" : "Configuring Swift Interoperability",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode(_:_:)",
                            "title" : "static func interoperabilityMode(SwiftSetting.InteroperabilityMode, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Enumeration Cases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/c",
                                "title" : "case C",
                                "type" : "case"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/cxx",
                                "title" : "case Cxx",
                                "type" : "case"
                              },
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/init(rawvalue:)",
                                "title" : "init?(rawValue: String)",
                                "type" : "init"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Properties",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/hashvalue",
                                    "title" : "var hashValue: Int",
                                    "type" : "property"
                                  },
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/hash(into:)",
                                    "title" : "func hash(into: inout Hasher)",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode\/rawrepresentable-implementations",
                                "title" : "RawRepresentable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/interoperabilitymode",
                            "title" : "SwiftSetting.InteroperabilityMode",
                            "type" : "enum"
                          },
                          {
                            "title" : "Deprecated configurations",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/swiftsetting\/swiftlanguageversion(_:_:)",
                            "title" : "static func swiftLanguageVersion(SwiftVersion, BuildSettingCondition?) -> SwiftSetting",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/swiftsetting",
                        "title" : "SwiftSetting",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Configuring Linker Settings",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/linkersetting\/linkedframework(_:_:)",
                            "title" : "static func linkedFramework(String, BuildSettingCondition?) -> LinkerSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/linkersetting\/linkedlibrary(_:_:)",
                            "title" : "static func linkedLibrary(String, BuildSettingCondition?) -> LinkerSetting",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/linkersetting\/unsafeflags(_:_:)",
                            "title" : "static func unsafeFlags([String], BuildSettingCondition?) -> LinkerSetting",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/linkersetting",
                        "title" : "LinkerSetting",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a Plugin Usage",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/pluginusage\/plugin(name:)",
                            "title" : "static func plugin(name: String) -> Target.PluginUsage",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/pluginusage\/plugin(name:package:)",
                            "title" : "case plugin(name: String, package: String?)",
                            "type" : "case"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/pluginusage\/init(unicodescalarliteral:)",
                                "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/pluginusage\/expressiblebyextendedgraphemeclusterliteral-implementations",
                            "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/pluginusage\/init(extendedgraphemeclusterliteral:)",
                                "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                                "type" : "init"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/pluginusage\/init(stringliteral:)",
                                "title" : "init(stringLiteral: String)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/pluginusage\/expressiblebystringliteral-implementations",
                            "title" : "ExpressibleByStringLiteral Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/target\/pluginusage",
                        "title" : "Target.PluginUsage",
                        "type" : "enum"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/packageaccess",
                        "title" : "let packageAccess: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Describing the Target Type",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/istest",
                        "title" : "var isTest: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/target\/type",
                        "title" : "let type: Target.TargetType",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/regular",
                            "title" : "case regular",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/binary",
                            "title" : "case binary",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/system",
                            "title" : "case system",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/test",
                            "title" : "case test",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/executable",
                            "title" : "case executable",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/plugin",
                            "title" : "case plugin",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/macro",
                            "title" : "case macro",
                            "type" : "case"
                          },
                          {
                            "title" : "Creating a Value",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/init(rawvalue:)",
                            "title" : "init?(rawValue: String)",
                            "type" : "init"
                          },
                          {
                            "title" : "Hashing",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Operator Functions",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/targettype\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/targettype\/hashvalue",
                                "title" : "var hashValue: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/target\/targettype\/hash(into:)",
                                "title" : "func hash(into: inout Hasher)",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/target\/targettype\/rawrepresentable-implementations",
                            "title" : "RawRepresentable Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/target\/targettype",
                        "title" : "Target.TargetType",
                        "type" : "enum"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/target",
                    "title" : "Target",
                    "type" : "class"
                  },
                  {
                    "title" : "Declaring Supported Platforms",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/platforms",
                    "title" : "var platforms: [SupportedPlatform]?",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Supporting iOS",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/ios(_:)-5pvv5",
                        "title" : "static func iOS(SupportedPlatform.IOSVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/ios(_:)-83bbf",
                        "title" : "static func iOS(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/ios",
                        "title" : "static let iOS: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v10",
                            "title" : "static let v10: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v11",
                            "title" : "static let v11: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v12",
                            "title" : "static let v12: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v13",
                            "title" : "static let v13: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v14",
                            "title" : "static let v14: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v15",
                            "title" : "static let v15: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v16",
                            "title" : "static let v16: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v17",
                            "title" : "static let v17: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v18",
                            "title" : "static let v18: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v26",
                            "title" : "static let v26: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v8",
                            "title" : "static let v8: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion\/v9",
                            "title" : "static let v9: SupportedPlatform.IOSVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/iosversion",
                        "title" : "SupportedPlatform.IOSVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting macOS",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/macos(_:)-2wthp",
                        "title" : "static func macOS(SupportedPlatform.MacOSVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/macos(_:)-9771f",
                        "title" : "static func macOS(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/macos",
                        "title" : "static let macOS: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_10",
                            "title" : "static let v10_10: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_11",
                            "title" : "static let v10_11: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_12",
                            "title" : "static let v10_12: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_13",
                            "title" : "static let v10_13: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_14",
                            "title" : "static let v10_14: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v10_15",
                            "title" : "static let v10_15: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v11",
                            "title" : "static let v11: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v12",
                            "title" : "static let v12: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v13",
                            "title" : "static let v13: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v14",
                            "title" : "static let v14: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v15",
                            "title" : "static let v15: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion\/v26",
                            "title" : "static let v26: SupportedPlatform.MacOSVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/macosversion",
                        "title" : "SupportedPlatform.MacOSVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting watchOS",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/watchos(_:)-t998",
                        "title" : "static func watchOS(SupportedPlatform.WatchOSVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/watchos(_:)-4lrx0",
                        "title" : "static func watchOS(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/watchos",
                        "title" : "static let watchOS: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v10",
                            "title" : "static let v10: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v11",
                            "title" : "static let v11: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v2",
                            "title" : "static let v2: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v26",
                            "title" : "static let v26: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v3",
                            "title" : "static let v3: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v4",
                            "title" : "static let v4: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v5",
                            "title" : "static let v5: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v6",
                            "title" : "static let v6: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v7",
                            "title" : "static let v7: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v8",
                            "title" : "static let v8: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion\/v9",
                            "title" : "static let v9: SupportedPlatform.WatchOSVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/watchosversion",
                        "title" : "SupportedPlatform.WatchOSVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting visionOS",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/visionos(_:)-3ip0z",
                        "title" : "static func visionOS(SupportedPlatform.VisionOSVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/visionos(_:)-6ur2u",
                        "title" : "static func visionOS(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/visionos",
                        "title" : "static let visionOS: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/visionosversion\/v1",
                            "title" : "static let v1: SupportedPlatform.VisionOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/visionosversion\/v2",
                            "title" : "static let v2: SupportedPlatform.VisionOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/visionosversion\/v26",
                            "title" : "static let v26: SupportedPlatform.VisionOSVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/visionosversion",
                        "title" : "SupportedPlatform.VisionOSVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting tvOS",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/tvos(_:)-6931l",
                        "title" : "static func tvOS(SupportedPlatform.TVOSVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/tvos(_:)-3k8sy",
                        "title" : "static func tvOS(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/tvos",
                        "title" : "static let tvOS: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v10",
                            "title" : "static let v10: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v11",
                            "title" : "static let v11: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v12",
                            "title" : "static let v12: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v13",
                            "title" : "static let v13: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v14",
                            "title" : "static let v14: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v15",
                            "title" : "static let v15: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v16",
                            "title" : "static let v16: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v17",
                            "title" : "static let v17: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v18",
                            "title" : "static let v18: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v26",
                            "title" : "static let v26: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion\/v9",
                            "title" : "static let v9: SupportedPlatform.TVOSVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/tvosversion",
                        "title" : "SupportedPlatform.TVOSVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting MacCatalyst",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalyst(_:)-6bh40",
                        "title" : "static func macCatalyst(SupportedPlatform.MacCatalystVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalyst(_:)-9wbz",
                        "title" : "static func macCatalyst(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/maccatalyst",
                        "title" : "static let macCatalyst: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v13",
                            "title" : "static let v13: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v14",
                            "title" : "static let v14: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v15",
                            "title" : "static let v15: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v16",
                            "title" : "static let v16: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v17",
                            "title" : "static let v17: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v18",
                            "title" : "static let v18: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion\/v26",
                            "title" : "static let v26: SupportedPlatform.MacCatalystVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/maccatalystversion",
                        "title" : "SupportedPlatform.MacCatalystVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting DriverKit",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkit(_:)-jxlz",
                        "title" : "static func driverKit(SupportedPlatform.DriverKitVersion) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkit(_:)-6evdd",
                        "title" : "static func driverKit(String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/driverkit",
                        "title" : "static let driverKit: Platform",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v19",
                            "title" : "static let v19: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v20",
                            "title" : "static let v20: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v21",
                            "title" : "static let v21: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v22",
                            "title" : "static let v22: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v23",
                            "title" : "static let v23: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v24",
                            "title" : "static let v24: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion\/v25",
                            "title" : "static let v25: SupportedPlatform.DriverKitVersion",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/driverkitversion",
                        "title" : "SupportedPlatform.DriverKitVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Supporting Custom Platforms",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/custom(_:versionstring:)",
                        "title" : "static func custom(String, versionString: String) -> SupportedPlatform",
                        "type" : "method"
                      },
                      {
                        "title" : "Operator Functions",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/customplatformversion",
                        "title" : "SupportedPlatform.CustomPlatformVersion",
                        "type" : "struct"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/supportedplatform\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/supportedplatform\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/supportedplatform",
                    "title" : "SupportedPlatform",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Platforms",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/ios",
                        "title" : "static let iOS: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/macos",
                        "title" : "static let macOS: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/tvos",
                        "title" : "static let tvOS: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/watchos",
                        "title" : "static let watchOS: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/visionos",
                        "title" : "static let visionOS: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/maccatalyst",
                        "title" : "static let macCatalyst: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/driverkit",
                        "title" : "static let driverKit: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/android",
                        "title" : "static let android: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/linux",
                        "title" : "static let linux: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/freebsd",
                        "title" : "static let freebsd: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/openbsd",
                        "title" : "static let openbsd: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/wasi",
                        "title" : "static let wasi: Platform",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/windows",
                        "title" : "static let windows: Platform",
                        "type" : "property"
                      },
                      {
                        "title" : "Type methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/custom(_:)",
                        "title" : "static func custom(String) -> Platform",
                        "type" : "method"
                      },
                      {
                        "title" : "Operator Functions",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/platform\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/platform\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/platform\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/platform",
                    "title" : "Platform",
                    "type" : "struct"
                  },
                  {
                    "title" : "Configuring System Packages",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Providing Hints to Users of System Packages",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/apt(_:)",
                        "title" : "static func apt([String]) -> SystemPackageProvider",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/brew(_:)",
                        "title" : "static func brew([String]) -> SystemPackageProvider",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/nuget(_:)",
                        "title" : "static func nuget([String]) -> SystemPackageProvider",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/yum(_:)",
                        "title" : "static func yum([String]) -> SystemPackageProvider",
                        "type" : "method"
                      },
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/aptitem(_:)",
                        "title" : "case aptItem([String])",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/brewitem(_:)",
                        "title" : "case brewItem([String])",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/nugetitem(_:)",
                        "title" : "case nugetItem([String])",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/systempackageprovider\/yumitem(_:)",
                        "title" : "case yumItem([String])",
                        "type" : "case"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/systempackageprovider",
                    "title" : "SystemPackageProvider",
                    "type" : "enum"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/pkgconfig",
                    "title" : "var pkgConfig: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/providers",
                    "title" : "var providers: [SystemPackageProvider]?",
                    "type" : "property"
                  },
                  {
                    "title" : "Configuring Traits",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/traits",
                    "title" : "var traits: Set<Trait>",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/init(name:description:enabledtraits:)",
                        "title" : "init(name: String, description: String?, enabledTraits: Set<String>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/init(stringliteral:)",
                        "title" : "init(stringLiteral: StringLiteralType)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/description",
                        "title" : "var description: String?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/enabledtraits",
                        "title" : "var enabledTraits: Set<String>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/name",
                        "title" : "var name: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/default(enabledtraits:)",
                        "title" : "static func `default`(enabledTraits: Set<String>) -> Trait",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/trait\/trait(name:description:enabledtraits:)",
                        "title" : "static func trait(name: String, description: String?, enabledTraits: Set<String>) -> Trait",
                        "type" : "method"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/trait\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/trait\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/trait\/init(unicodescalarliteral:)",
                            "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/trait\/expressiblebyextendedgraphemeclusterliteral-implementations",
                        "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/trait\/init(extendedgraphemeclusterliteral:)",
                            "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                            "type" : "init"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/trait\/expressiblebystringliteral-implementations",
                        "title" : "ExpressibleByStringLiteral Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/trait",
                    "title" : "Trait",
                    "type" : "struct"
                  },
                  {
                    "title" : "Declaring Package Dependencies",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/dependencies",
                    "title" : "var dependencies: [Package.Dependency]",
                    "type" : "property"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Creating a package dependency from a URL",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:from:)",
                        "title" : "static func package(url: String, from: Version) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:from:traits:)",
                        "title" : "static func package(url: String, from: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:_:)-2ys47",
                        "title" : "static func package(url: String, Range<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:_:traits:)-5pt81",
                        "title" : "static func package(url: String, Range<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:_:)-1r6rc",
                        "title" : "static func package(url: String, ClosedRange<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:_:traits:)-mjzv",
                        "title" : "static func package(url: String, ClosedRange<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:branch:)",
                        "title" : "static func package(url: String, branch: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:branch:traits:)",
                        "title" : "static func package(url: String, branch: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:revision:)",
                        "title" : "static func package(url: String, revision: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:revision:traits:)",
                        "title" : "static func package(url: String, revision: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:exact:)",
                        "title" : "static func package(url: String, exact: Version) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:exact:traits:)",
                        "title" : "static func package(url: String, exact: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "title" : "Creating a package dependency from a registry",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:from:)",
                        "title" : "static func package(id: String, from: Version) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:from:traits:)",
                        "title" : "static func package(id: String, from: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:_:)-27raa",
                        "title" : "static func package(id: String, Range<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:_:traits:)-5rb8r",
                        "title" : "static func package(id: String, Range<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:_:)-6anr7",
                        "title" : "static func package(id: String, ClosedRange<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:_:traits:)-5x94p",
                        "title" : "static func package(id: String, ClosedRange<Version>, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:exact:)",
                        "title" : "static func package(id: String, exact: Version) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(id:exact:traits:)",
                        "title" : "static func package(id: String, exact: Version, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "title" : "Creating a local dependency",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:path:)",
                        "title" : "static func package(name: String, path: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:path:traits:)",
                        "title" : "static func package(name: String, path: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(path:)",
                        "title" : "static func package(path: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(path:traits:)",
                        "title" : "static func package(path: String, traits: Set<Package.Dependency.Trait>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "title" : "Declaring Requirements",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/traits",
                        "title" : "let traits: Set<Package.Dependency.Trait>",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Structures",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Type Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/condition-swift.struct\/when(traits:)",
                                "title" : "static func when(traits: Set<String>) -> Package.Dependency.Trait.Condition?",
                                "type" : "method"
                              },
                              {
                                "title" : "Default Implementations",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Operators",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/condition-swift.struct\/!=(_:_:)",
                                    "title" : "static func != (Self, Self) -> Bool",
                                    "type" : "op"
                                  }
                                ],
                                "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/condition-swift.struct\/equatable-implementations",
                                "title" : "Equatable Implementations",
                                "type" : "symbol"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/condition-swift.struct",
                            "title" : "Package.Dependency.Trait.Condition",
                            "type" : "struct"
                          },
                          {
                            "title" : "Initializers",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/init(name:condition:)",
                            "title" : "init(name: String, condition: Package.Dependency.Trait.Condition?)",
                            "type" : "init"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/init(stringliteral:)",
                            "title" : "init(stringLiteral: StringLiteralType)",
                            "type" : "init"
                          },
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/condition-swift.property",
                            "title" : "var condition: Package.Dependency.Trait.Condition?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/name",
                            "title" : "var name: String",
                            "type" : "property"
                          },
                          {
                            "title" : "Type Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/defaults",
                            "title" : "static let defaults: Package.Dependency.Trait",
                            "type" : "property"
                          },
                          {
                            "title" : "Type Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/trait(name:condition:)",
                            "title" : "static func trait(name: String, condition: Package.Dependency.Trait.Condition?) -> Package.Dependency.Trait",
                            "type" : "method"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/init(unicodescalarliteral:)",
                                "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/expressiblebyextendedgraphemeclusterliteral-implementations",
                            "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/init(extendedgraphemeclusterliteral:)",
                                "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/trait\/expressiblebystringliteral-implementations",
                            "title" : "ExpressibleByStringLiteral Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/trait",
                        "title" : "Package.Dependency.Trait",
                        "type" : "struct"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/registryrequirement\/exact(_:)",
                            "title" : "case exact(Version)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/registryrequirement\/range(_:)",
                            "title" : "case range(Range<Version>)",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/registryrequirement",
                        "title" : "Package.Dependency.RegistryRequirement",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/sourcecontrolrequirement\/branch(_:)",
                            "title" : "case branch(String)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/sourcecontrolrequirement\/exact(_:)",
                            "title" : "case exact(Version)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/sourcecontrolrequirement\/range(_:)",
                            "title" : "case range(Range<Version>)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/sourcecontrolrequirement\/revision(_:)",
                            "title" : "case revision(String)",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/sourcecontrolrequirement",
                        "title" : "Package.Dependency.SourceControlRequirement",
                        "type" : "enum"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.property",
                        "title" : "var requirement: Package.Dependency.Requirement",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/branchitem(_:)",
                            "title" : "case branchItem(String)",
                            "type" : "case"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/exactitem(_:)",
                            "title" : "case exactItem(Version)",
                            "type" : "case"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/localpackageitem",
                            "title" : "case localPackageItem",
                            "type" : "case"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/rangeitem(_:)",
                            "title" : "case rangeItem(Range<Version>)",
                            "type" : "case"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/revisionitem(_:)",
                            "title" : "case revisionItem(String)",
                            "type" : "case"
                          },
                          {
                            "title" : "Type Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/branch(_:)",
                            "title" : "static func branch(String) -> Package.Dependency.Requirement",
                            "type" : "method"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/exact(_:)",
                            "title" : "static func exact(Version) -> Package.Dependency.Requirement",
                            "type" : "method"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/revision(_:)",
                            "title" : "static func revision(String) -> Package.Dependency.Requirement",
                            "type" : "method"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/uptonextmajor(from:)",
                            "title" : "static func upToNextMajor(from: Version) -> Package.Dependency.Requirement",
                            "type" : "method"
                          },
                          {
                            "deprecated" : true,
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum\/uptonextminor(from:)",
                            "title" : "static func upToNextMinor(from: Version) -> Package.Dependency.Requirement",
                            "type" : "method"
                          }
                        ],
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/requirement-swift.enum",
                        "title" : "Package.Dependency.Requirement",
                        "type" : "enum"
                      },
                      {
                        "title" : "Describing a Package Dependency",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/kind-swift.property",
                        "title" : "let kind: Package.Dependency.Kind",
                        "type" : "property"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Enumeration Cases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/kind-swift.enum\/filesystem(name:path:)",
                            "title" : "case fileSystem(name: String?, path: String)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/kind-swift.enum\/registry(id:requirement:)",
                            "title" : "case registry(id: String, requirement: Package.Dependency.RegistryRequirement)",
                            "type" : "case"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/package\/dependency\/kind-swift.enum\/sourcecontrol(name:location:requirement:)",
                            "title" : "case sourceControl(name: String?, location: String, requirement: Package.Dependency.SourceControlRequirement)",
                            "type" : "case"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/kind-swift.enum",
                        "title" : "Package.Dependency.Kind",
                        "type" : "enum"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Creating a new version",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/init(_:_:_:prereleaseidentifiers:buildmetadataidentifiers:)",
                            "title" : "init(Int, Int, Int, prereleaseIdentifiers: [String], buildMetadataIdentifiers: [String])",
                            "type" : "init"
                          },
                          {
                            "title" : "Inspecting a version",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/major",
                            "title" : "let major: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/minor",
                            "title" : "let minor: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/patch",
                            "title" : "let patch: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/prereleaseidentifiers",
                            "title" : "let prereleaseIdentifiers: [String]",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/version\/buildmetadataidentifiers",
                            "title" : "let buildMetadataIdentifiers: [String]",
                            "type" : "property"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/'...(_:)-69iyk",
                                "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/'...(_:)-9ansa",
                                "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/'...(_:_:)",
                                "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/'.._(_:)",
                                "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/'.._(_:_:)",
                                "title" : "static func ..< (Self, Self) -> Range<Self>",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/_(_:_:)",
                                "title" : "static func < (Version, Version) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/_(_:_:)-6qwjc",
                                "title" : "static func > (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/_=(_:_:)-2r3us",
                                "title" : "static func <= (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/_=(_:_:)-7n9wi",
                                "title" : "static func >= (Self, Self) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/comparable-implementations",
                            "title" : "Comparable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/description",
                                "title" : "var description: String",
                                "type" : "property"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/customstringconvertible-implementations",
                            "title" : "CustomStringConvertible Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Operators",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/!=(_:_:)",
                                "title" : "static func != (Self, Self) -> Bool",
                                "type" : "op"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/==(_:_:)",
                                "title" : "static func == (Version, Version) -> Bool",
                                "type" : "op"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/equatable-implementations",
                            "title" : "Equatable Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(extendedgraphemeclusterliteral:)",
                                "title" : "init(extendedGraphemeClusterLiteral: String)",
                                "type" : "init"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(unicodescalarliteral:)-4tmk2",
                                "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/expressiblebyextendedgraphemeclusterliteral-implementations",
                            "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(extendedgraphemeclusterliteral:)-2ra9s",
                                "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                                "type" : "init"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(stringliteral:)",
                                "title" : "init(stringLiteral: String)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/expressiblebystringliteral-implementations",
                            "title" : "ExpressibleByStringLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(unicodescalarliteral:)",
                                "title" : "init(unicodeScalarLiteral: String)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/expressiblebyunicodescalarliteral-implementations",
                            "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Initializers",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/packagedescription\/version\/init(_:)",
                                "title" : "init?(String)",
                                "type" : "init"
                              }
                            ],
                            "path" : "\/documentation\/packagedescription\/version\/losslessstringconvertible-implementations",
                            "title" : "LosslessStringConvertible Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/version",
                        "title" : "Version",
                        "type" : "struct"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/name",
                        "title" : "var name: String?",
                        "type" : "property"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/url",
                        "title" : "var url: String?",
                        "type" : "property"
                      },
                      {
                        "title" : "Deprecated methods",
                        "type" : "groupMarker"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:_:)-6k3na",
                        "title" : "static func package(name: String?, url: String, Package.Dependency.Requirement) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:_:)-nqbk",
                        "title" : "static func package(name: String, url: String, Range<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:_:)-7zltl",
                        "title" : "static func package(name: String, url: String, ClosedRange<Version>) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:branch:)",
                        "title" : "static func package(name: String, url: String, branch: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:from:)",
                        "title" : "static func package(name: String, url: String, from: Version) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(name:url:revision:)",
                        "title" : "static func package(name: String, url: String, revision: String) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/package(url:_:)-4tkwi",
                        "title" : "static func package(url: String, Package.Dependency.Requirement) -> Package.Dependency",
                        "type" : "method"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/name",
                        "title" : "var name: String?",
                        "type" : "property"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/package\/dependency\/url",
                        "title" : "var url: String?",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/package\/dependency",
                    "title" : "Package.Dependency",
                    "type" : "class"
                  },
                  {
                    "title" : "Declaring Supported Languages",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Swift Language Modes",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/v6",
                        "title" : "case v6",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/v5",
                        "title" : "case v5",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/v4_2",
                        "title" : "case v4_2",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/v4",
                        "title" : "case v4",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/version(_:)",
                        "title" : "case version(String)",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/v3",
                        "title" : "case v3",
                        "type" : "case"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/description",
                            "title" : "var description: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/swiftlanguagemode\/customstringconvertible-implementations",
                        "title" : "CustomStringConvertible Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/swiftlanguagemode",
                    "title" : "SwiftLanguageMode",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c11",
                        "title" : "case c11",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c17",
                        "title" : "case c17",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c18",
                        "title" : "case c18",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c2x",
                        "title" : "case c2x",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c89",
                        "title" : "case c89",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c90",
                        "title" : "case c90",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/c99",
                        "title" : "case c99",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu11",
                        "title" : "case gnu11",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu17",
                        "title" : "case gnu17",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu18",
                        "title" : "case gnu18",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu2x",
                        "title" : "case gnu2x",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu89",
                        "title" : "case gnu89",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu90",
                        "title" : "case gnu90",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/gnu99",
                        "title" : "case gnu99",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_1990",
                        "title" : "case iso9899_1990",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_199409",
                        "title" : "case iso9899_199409",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_1999",
                        "title" : "case iso9899_1999",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_2011",
                        "title" : "case iso9899_2011",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_2017",
                        "title" : "case iso9899_2017",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/iso9899_2018",
                        "title" : "case iso9899_2018",
                        "type" : "case"
                      },
                      {
                        "title" : "Hashing",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Operator Functions",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "title" : "Creating a Value",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/clanguagestandard\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/clanguagestandard\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/clanguagestandard\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/clanguagestandard\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/clanguagestandard",
                    "title" : "CLanguageStandard",
                    "type" : "enum"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Enumeration Cases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx03",
                        "title" : "case cxx03",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx11",
                        "title" : "case cxx11",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx14",
                        "title" : "case cxx14",
                        "type" : "case"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx1z",
                        "title" : "case cxx1z",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx98",
                        "title" : "case cxx98",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx03",
                        "title" : "case gnucxx03",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx11",
                        "title" : "case gnucxx11",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx14",
                        "title" : "case gnucxx14",
                        "type" : "case"
                      },
                      {
                        "deprecated" : true,
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx1z",
                        "title" : "case gnucxx1z",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx98",
                        "title" : "case gnucxx98",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx17",
                        "title" : "case cxx17",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx20",
                        "title" : "case cxx20",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/cxx2b",
                        "title" : "case cxx2b",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx17",
                        "title" : "case gnucxx17",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx20",
                        "title" : "case gnucxx20",
                        "type" : "case"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/gnucxx2b",
                        "title" : "case gnucxx2b",
                        "type" : "case"
                      },
                      {
                        "title" : "Hashing",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Operator Functions",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "title" : "Creating a Value",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/init(rawvalue:)",
                        "title" : "init?(rawValue: String)",
                        "type" : "init"
                      },
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/hashvalue",
                            "title" : "var hashValue: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/packagedescription\/cxxlanguagestandard\/rawrepresentable-implementations",
                        "title" : "RawRepresentable Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/cxxlanguagestandard",
                    "title" : "CXXLanguageStandard",
                    "type" : "enum"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/swiftlanguagemodes",
                    "title" : "var swiftLanguageModes: [SwiftLanguageMode]?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/clanguagestandard",
                    "title" : "var cLanguageStandard: CLanguageStandard?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/package\/cxxlanguagestandard",
                    "title" : "var cxxLanguageStandard: CXXLanguageStandard?",
                    "type" : "property"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packagedescription\/swiftversion",
                    "title" : "SwiftVersion",
                    "type" : "typealias"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/packagedescription\/package\/swiftlanguageversions",
                    "title" : "var swiftLanguageVersions: [SwiftVersion]?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/package",
                "title" : "Package",
                "type" : "class"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/context\/environment",
                    "title" : "static var environment: [String : String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/context\/gitinformation",
                    "title" : "static var gitInformation: GitInformation?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/context\/packagedirectory",
                    "title" : "static var packageDirectory: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/context",
                "title" : "Context",
                "type" : "struct"
              },
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/gitinformation\/currentcommit",
                    "title" : "let currentCommit: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/gitinformation\/currenttag",
                    "title" : "let currentTag: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/gitinformation\/hasuncommittedchanges",
                    "title" : "let hasUncommittedChanges: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/gitinformation",
                "title" : "GitInformation",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Creating a new version",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/init(_:_:_:prereleaseidentifiers:buildmetadataidentifiers:)",
                    "title" : "init(Int, Int, Int, prereleaseIdentifiers: [String], buildMetadataIdentifiers: [String])",
                    "type" : "init"
                  },
                  {
                    "title" : "Inspecting a version",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/major",
                    "title" : "let major: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/minor",
                    "title" : "let minor: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/patch",
                    "title" : "let patch: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/prereleaseidentifiers",
                    "title" : "let prereleaseIdentifiers: [String]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/version\/buildmetadataidentifiers",
                    "title" : "let buildMetadataIdentifiers: [String]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/'...(_:)-69iyk",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/'...(_:)-9ansa",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/_(_:_:)",
                        "title" : "static func < (Version, Version) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/_(_:_:)-6qwjc",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/_=(_:_:)-2r3us",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/_=(_:_:)-7n9wi",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/==(_:_:)",
                        "title" : "static func == (Version, Version) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(extendedgraphemeclusterliteral:)",
                        "title" : "init(extendedGraphemeClusterLiteral: String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(unicodescalarliteral:)-4tmk2",
                        "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(extendedgraphemeclusterliteral:)-2ra9s",
                        "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(stringliteral:)",
                        "title" : "init(stringLiteral: String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/expressiblebystringliteral-implementations",
                    "title" : "ExpressibleByStringLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(unicodescalarliteral:)",
                        "title" : "init(unicodeScalarLiteral: String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/expressiblebyunicodescalarliteral-implementations",
                    "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/version\/init(_:)",
                        "title" : "init?(String)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/version\/losslessstringconvertible-implementations",
                    "title" : "LosslessStringConvertible Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/version",
                "title" : "Version",
                "type" : "struct"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/warninglevel\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/warninglevel\/warning",
                    "title" : "case warning",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/packagedescription\/warninglevel\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/warninglevel\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/warninglevel\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/warninglevel\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/warninglevel\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/warninglevel\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/warninglevel",
                "title" : "WarningLevel",
                "type" : "enum"
              },
              {
                "title" : "Extended Modules",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Extended Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swift\/range\/uptonextmajor(from:)",
                        "title" : "static func upToNextMajor(from: Version) -> Range<Bound>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/packagedescription\/swift\/range\/uptonextminor(from:)",
                        "title" : "static func upToNextMinor(from: Version) -> Range<Bound>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/packagedescription\/swift\/range",
                    "title" : "Range",
                    "type" : "extension"
                  }
                ],
                "path" : "\/documentation\/packagedescription\/swift",
                "title" : "Swift",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/packagedescription",
            "title" : "PackageDescription",
            "type" : "module"
          }
        ],
        "path" : "\/documentation",
        "title" : "SwiftPM",
        "type" : "module"
      }
    ]
  },
  "references" : {
    "command-icon.svg" : {
      "alt" : null,
      "identifier" : "command-icon.svg",
      "type" : "image",
      "variants" : [
        {
          "traits" : [
            "1x",
            "light"
          ],
          "url" : "\/images\/PackageManagerDocs\/command-icon.svg"
        },
        {
          "traits" : [
            "1x",
            "dark"
          ],
          "url" : "\/images\/PackageManagerDocs\/command-icon~dark.svg"
        }
      ]
    }
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}